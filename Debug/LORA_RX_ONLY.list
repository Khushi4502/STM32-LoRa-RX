
LORA_RX_ONLY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003404  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080034c4  080034c4  000044c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003580  08003580  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003580  08003580  00004580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003588  08003588  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003588  08003588  00004588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800358c  0800358c  0000458c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003590  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000005c  080035ec  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  080035ec  000052d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000083e8  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001720  00000000  00000000  0000d46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  0000eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000511  00000000  00000000  0000f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011cbe  00000000  00000000  0000f749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000099ff  00000000  00000000  00021407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006bc51  00000000  00000000  0002ae06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00096a57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b5c  00000000  00000000  00096a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000985f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080034ac 	.word	0x080034ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080034ac 	.word	0x080034ac

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4699      	mov	r9, r3
 800028a:	0c03      	lsrs	r3, r0, #16
 800028c:	469c      	mov	ip, r3
 800028e:	0413      	lsls	r3, r2, #16
 8000290:	4647      	mov	r7, r8
 8000292:	0c1b      	lsrs	r3, r3, #16
 8000294:	001d      	movs	r5, r3
 8000296:	000e      	movs	r6, r1
 8000298:	4661      	mov	r1, ip
 800029a:	0404      	lsls	r4, r0, #16
 800029c:	0c24      	lsrs	r4, r4, #16
 800029e:	b580      	push	{r7, lr}
 80002a0:	0007      	movs	r7, r0
 80002a2:	0c10      	lsrs	r0, r2, #16
 80002a4:	434b      	muls	r3, r1
 80002a6:	4365      	muls	r5, r4
 80002a8:	4341      	muls	r1, r0
 80002aa:	4360      	muls	r0, r4
 80002ac:	0c2c      	lsrs	r4, r5, #16
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	1824      	adds	r4, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	42a3      	cmp	r3, r4
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4356      	muls	r6, r2
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	042d      	lsls	r5, r5, #16
 80002ca:	0c2d      	lsrs	r5, r5, #16
 80002cc:	1989      	adds	r1, r1, r6
 80002ce:	4463      	add	r3, ip
 80002d0:	0424      	lsls	r4, r4, #16
 80002d2:	1960      	adds	r0, r4, r5
 80002d4:	18c9      	adds	r1, r1, r3
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			@ (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8ba 	bl	8000478 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8b5 	bl	8000478 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	d434      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000316:	469b      	mov	fp, r3
 8000318:	4653      	mov	r3, sl
 800031a:	465a      	mov	r2, fp
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83b      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e079      	b.n	8000426 <__udivmoddi4+0x146>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e076      	b.n	800042c <__udivmoddi4+0x14c>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e029      	b.n	80003ac <__udivmoddi4+0xcc>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	469b      	mov	fp, r3
 8000384:	2320      	movs	r3, #32
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	4652      	mov	r2, sl
 800038a:	40da      	lsrs	r2, r3
 800038c:	4641      	mov	r1, r8
 800038e:	0013      	movs	r3, r2
 8000390:	464a      	mov	r2, r9
 8000392:	408a      	lsls	r2, r1
 8000394:	0017      	movs	r7, r2
 8000396:	4642      	mov	r2, r8
 8000398:	431f      	orrs	r7, r3
 800039a:	4653      	mov	r3, sl
 800039c:	4093      	lsls	r3, r2
 800039e:	001e      	movs	r6, r3
 80003a0:	42af      	cmp	r7, r5
 80003a2:	d9c3      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	4643      	mov	r3, r8
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0d8      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b2:	07fb      	lsls	r3, r7, #31
 80003b4:	0872      	lsrs	r2, r6, #1
 80003b6:	431a      	orrs	r2, r3
 80003b8:	4646      	mov	r6, r8
 80003ba:	087b      	lsrs	r3, r7, #1
 80003bc:	e00e      	b.n	80003dc <__udivmoddi4+0xfc>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	d101      	bne.n	80003c6 <__udivmoddi4+0xe6>
 80003c2:	42a2      	cmp	r2, r4
 80003c4:	d80c      	bhi.n	80003e0 <__udivmoddi4+0x100>
 80003c6:	1aa4      	subs	r4, r4, r2
 80003c8:	419d      	sbcs	r5, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2100      	movs	r1, #0
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1824      	adds	r4, r4, r0
 80003d6:	414d      	adcs	r5, r1
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d006      	beq.n	80003ea <__udivmoddi4+0x10a>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d9ee      	bls.n	80003be <__udivmoddi4+0xde>
 80003e0:	3e01      	subs	r6, #1
 80003e2:	1924      	adds	r4, r4, r4
 80003e4:	416d      	adcs	r5, r5
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1f8      	bne.n	80003dc <__udivmoddi4+0xfc>
 80003ea:	9800      	ldr	r0, [sp, #0]
 80003ec:	9901      	ldr	r1, [sp, #4]
 80003ee:	465b      	mov	r3, fp
 80003f0:	1900      	adds	r0, r0, r4
 80003f2:	4169      	adcs	r1, r5
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db24      	blt.n	8000442 <__udivmoddi4+0x162>
 80003f8:	002b      	movs	r3, r5
 80003fa:	465a      	mov	r2, fp
 80003fc:	4644      	mov	r4, r8
 80003fe:	40d3      	lsrs	r3, r2
 8000400:	002a      	movs	r2, r5
 8000402:	40e2      	lsrs	r2, r4
 8000404:	001c      	movs	r4, r3
 8000406:	465b      	mov	r3, fp
 8000408:	0015      	movs	r5, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	db2a      	blt.n	8000464 <__udivmoddi4+0x184>
 800040e:	0026      	movs	r6, r4
 8000410:	409e      	lsls	r6, r3
 8000412:	0033      	movs	r3, r6
 8000414:	0026      	movs	r6, r4
 8000416:	4647      	mov	r7, r8
 8000418:	40be      	lsls	r6, r7
 800041a:	0032      	movs	r2, r6
 800041c:	1a80      	subs	r0, r0, r2
 800041e:	4199      	sbcs	r1, r3
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	9101      	str	r1, [sp, #4]
 8000424:	e79e      	b.n	8000364 <__udivmoddi4+0x84>
 8000426:	42a3      	cmp	r3, r4
 8000428:	d8bc      	bhi.n	80003a4 <__udivmoddi4+0xc4>
 800042a:	e782      	b.n	8000332 <__udivmoddi4+0x52>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	2100      	movs	r1, #0
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	2200      	movs	r2, #0
 8000436:	9100      	str	r1, [sp, #0]
 8000438:	9201      	str	r2, [sp, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	40da      	lsrs	r2, r3
 800043e:	9201      	str	r2, [sp, #4]
 8000440:	e785      	b.n	800034e <__udivmoddi4+0x6e>
 8000442:	4642      	mov	r2, r8
 8000444:	2320      	movs	r3, #32
 8000446:	1a9b      	subs	r3, r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	4646      	mov	r6, r8
 800044c:	409a      	lsls	r2, r3
 800044e:	0023      	movs	r3, r4
 8000450:	40f3      	lsrs	r3, r6
 8000452:	4644      	mov	r4, r8
 8000454:	4313      	orrs	r3, r2
 8000456:	002a      	movs	r2, r5
 8000458:	40e2      	lsrs	r2, r4
 800045a:	001c      	movs	r4, r3
 800045c:	465b      	mov	r3, fp
 800045e:	0015      	movs	r5, r2
 8000460:	2b00      	cmp	r3, #0
 8000462:	dad4      	bge.n	800040e <__udivmoddi4+0x12e>
 8000464:	4642      	mov	r2, r8
 8000466:	002f      	movs	r7, r5
 8000468:	2320      	movs	r3, #32
 800046a:	0026      	movs	r6, r4
 800046c:	4097      	lsls	r7, r2
 800046e:	1a9b      	subs	r3, r3, r2
 8000470:	40de      	lsrs	r6, r3
 8000472:	003b      	movs	r3, r7
 8000474:	4333      	orrs	r3, r6
 8000476:	e7cd      	b.n	8000414 <__udivmoddi4+0x134>

08000478 <__clzdi2>:
 8000478:	b510      	push	{r4, lr}
 800047a:	2900      	cmp	r1, #0
 800047c:	d103      	bne.n	8000486 <__clzdi2+0xe>
 800047e:	f000 f807 	bl	8000490 <__clzsi2>
 8000482:	3020      	adds	r0, #32
 8000484:	e002      	b.n	800048c <__clzdi2+0x14>
 8000486:	0008      	movs	r0, r1
 8000488:	f000 f802 	bl	8000490 <__clzsi2>
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__clzsi2>:
 8000490:	211c      	movs	r1, #28
 8000492:	2301      	movs	r3, #1
 8000494:	041b      	lsls	r3, r3, #16
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0xe>
 800049a:	0c00      	lsrs	r0, r0, #16
 800049c:	3910      	subs	r1, #16
 800049e:	0a1b      	lsrs	r3, r3, #8
 80004a0:	4298      	cmp	r0, r3
 80004a2:	d301      	bcc.n	80004a8 <__clzsi2+0x18>
 80004a4:	0a00      	lsrs	r0, r0, #8
 80004a6:	3908      	subs	r1, #8
 80004a8:	091b      	lsrs	r3, r3, #4
 80004aa:	4298      	cmp	r0, r3
 80004ac:	d301      	bcc.n	80004b2 <__clzsi2+0x22>
 80004ae:	0900      	lsrs	r0, r0, #4
 80004b0:	3904      	subs	r1, #4
 80004b2:	a202      	add	r2, pc, #8	@ (adr r2, 80004bc <__clzsi2+0x2c>)
 80004b4:	5c10      	ldrb	r0, [r2, r0]
 80004b6:	1840      	adds	r0, r0, r1
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	02020304 	.word	0x02020304
 80004c0:	01010101 	.word	0x01010101
	...

080004cc <port_debug_print>:
	return HAL_UARTEx_ReceiveToIdle(&huart2, data, len, rx_len, 10000);
//	return HAL_UART_Receive(&huart2, data, len, 10000);
}

void port_debug_print(char * data)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	uint16_t len = (uint16_t)strlen((const char *)data);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	0018      	movs	r0, r3
 80004d8:	f7ff fe16 	bl	8000108 <strlen>
 80004dc:	0002      	movs	r2, r0
 80004de:	210e      	movs	r1, #14
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	801a      	strh	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, (uint8_t *)data, len, 500);
 80004e4:	23fa      	movs	r3, #250	@ 0xfa
 80004e6:	005c      	lsls	r4, r3, #1
 80004e8:	187b      	adds	r3, r7, r1
 80004ea:	881a      	ldrh	r2, [r3, #0]
 80004ec:	6879      	ldr	r1, [r7, #4]
 80004ee:	4804      	ldr	r0, [pc, #16]	@ (8000500 <port_debug_print+0x34>)
 80004f0:	0023      	movs	r3, r4
 80004f2:	f001 fd09 	bl	8001f08 <HAL_UART_Transmit>
}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b005      	add	sp, #20
 80004fc:	bd90      	pop	{r4, r7, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	20000100 	.word	0x20000100

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b0bd      	sub	sp, #244	@ 0xf4
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fb05 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f8b1 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f97b 	bl	800080c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000516:	f000 f91b 	bl	8000750 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800051a:	f000 f947 	bl	80007ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LORA_MODE_M0_SET;
 800051e:	4b51      	ldr	r3, [pc, #324]	@ (8000664 <main+0x160>)
 8000520:	2201      	movs	r2, #1
 8000522:	2108      	movs	r1, #8
 8000524:	0018      	movs	r0, r3
 8000526:	f000 fdb5 	bl	8001094 <HAL_GPIO_WritePin>
   LORA_MODE_M1_SET;
 800052a:	4b4e      	ldr	r3, [pc, #312]	@ (8000664 <main+0x160>)
 800052c:	2201      	movs	r2, #1
 800052e:	2110      	movs	r1, #16
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fdaf 	bl	8001094 <HAL_GPIO_WritePin>
   HAL_Delay(1000);
 8000536:	23fa      	movs	r3, #250	@ 0xfa
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	0018      	movs	r0, r3
 800053c:	f000 fb5c 	bl	8000bf8 <HAL_Delay>

   lora[0]=0xc0;
 8000540:	211c      	movs	r1, #28
 8000542:	187b      	adds	r3, r7, r1
 8000544:	22c0      	movs	r2, #192	@ 0xc0
 8000546:	701a      	strb	r2, [r3, #0]
   lora[1]=0x00;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	705a      	strb	r2, [r3, #1]
   lora[2]=0x08;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2208      	movs	r2, #8
 8000552:	709a      	strb	r2, [r3, #2]
   lora[3]=0x00;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	70da      	strb	r2, [r3, #3]
   lora[4]=0x11; ///////
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2211      	movs	r2, #17
 800055e:	711a      	strb	r2, [r3, #4]
   lora[5]=0x67;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2267      	movs	r2, #103	@ 0x67
 8000564:	715a      	strb	r2, [r3, #5]
   lora[6]=0x00;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	719a      	strb	r2, [r3, #6]
   lora[7]=0x12;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2212      	movs	r2, #18
 8000570:	71da      	strb	r2, [r3, #7]
   lora[8]=0x52;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2252      	movs	r2, #82	@ 0x52
 8000576:	721a      	strb	r2, [r3, #8]
   lora[9]=0x00;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	725a      	strb	r2, [r3, #9]
   lora[10]=0x00;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	729a      	strb	r2, [r3, #10]

   HAL_UART_Transmit(&hlpuart1, lora, 11, 2000);
 8000584:	23fa      	movs	r3, #250	@ 0xfa
 8000586:	00db      	lsls	r3, r3, #3
 8000588:	1879      	adds	r1, r7, r1
 800058a:	4837      	ldr	r0, [pc, #220]	@ (8000668 <main+0x164>)
 800058c:	220b      	movs	r2, #11
 800058e:	f001 fcbb 	bl	8001f08 <HAL_UART_Transmit>

     HAL_Delay(5000);
 8000592:	4b36      	ldr	r3, [pc, #216]	@ (800066c <main+0x168>)
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fb2f 	bl	8000bf8 <HAL_Delay>

    LORA_MODE_M0_RESET;
 800059a:	4b32      	ldr	r3, [pc, #200]	@ (8000664 <main+0x160>)
 800059c:	2200      	movs	r2, #0
 800059e:	2108      	movs	r1, #8
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fd77 	bl	8001094 <HAL_GPIO_WritePin>
    LORA_MODE_M1_RESET;
 80005a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000664 <main+0x160>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 fd71 	bl	8001094 <HAL_GPIO_WritePin>

    HAL_Delay(1000);
 80005b2:	23fa      	movs	r3, #250	@ 0xfa
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	0018      	movs	r0, r3
 80005b8:	f000 fb1e 	bl	8000bf8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Clear rxBuffer
	     rxBuffer[0] = 0;
 80005bc:	2418      	movs	r4, #24
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]

	  if (HAL_UART_Receive(&hlpuart1, rxBuffer, 1, 200) == HAL_OK)
 80005c4:	1939      	adds	r1, r7, r4
 80005c6:	4828      	ldr	r0, [pc, #160]	@ (8000668 <main+0x164>)
 80005c8:	23c8      	movs	r3, #200	@ 0xc8
 80005ca:	2201      	movs	r2, #1
 80005cc:	f001 fd3c 	bl	8002048 <HAL_UART_Receive>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d1f3      	bne.n	80005bc <main+0xb8>
	      {
	        // Blink LED1 to indicate data reception
	        LED1_ON;
 80005d4:	2380      	movs	r3, #128	@ 0x80
 80005d6:	00d9      	lsls	r1, r3, #3
 80005d8:	23a0      	movs	r3, #160	@ 0xa0
 80005da:	05db      	lsls	r3, r3, #23
 80005dc:	2201      	movs	r2, #1
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 fd58 	bl	8001094 <HAL_GPIO_WritePin>
	        HAL_Delay(100);
 80005e4:	2064      	movs	r0, #100	@ 0x64
 80005e6:	f000 fb07 	bl	8000bf8 <HAL_Delay>

			// Prepare data for retransmission (prefix with 00, 16, 12)
			transmitBuffer[0] = 0x00;
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
			transmitBuffer[1] = 0x16;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2216      	movs	r2, #22
 80005f4:	705a      	strb	r2, [r3, #1]
			transmitBuffer[2] = 0x12;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2212      	movs	r2, #18
 80005fa:	709a      	strb	r2, [r3, #2]
			transmitBuffer[3] = rxBuffer[0]; // Add the received byte
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	70da      	strb	r2, [r3, #3]

	        // Debug: Print received data to UART2
	        sprintf(message, "Received from LoRa: %02d\r\n", rxBuffer[0]);
 8000604:	193b      	adds	r3, r7, r4
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	001a      	movs	r2, r3
 800060a:	4919      	ldr	r1, [pc, #100]	@ (8000670 <main+0x16c>)
 800060c:	2428      	movs	r4, #40	@ 0x28
 800060e:	193b      	adds	r3, r7, r4
 8000610:	0018      	movs	r0, r3
 8000612:	f002 faad 	bl	8002b70 <siprintf>
	        port_debug_print(message);
 8000616:	193b      	adds	r3, r7, r4
 8000618:	0018      	movs	r0, r3
 800061a:	f7ff ff57 	bl	80004cc <port_debug_print>

	        LED1_OFF;
 800061e:	2380      	movs	r3, #128	@ 0x80
 8000620:	00d9      	lsls	r1, r3, #3
 8000622:	23a0      	movs	r3, #160	@ 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2200      	movs	r2, #0
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fd33 	bl	8001094 <HAL_GPIO_WritePin>


	        LED2_ON;
 800062e:	2380      	movs	r3, #128	@ 0x80
 8000630:	0119      	lsls	r1, r3, #4
 8000632:	23a0      	movs	r3, #160	@ 0xa0
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	2201      	movs	r2, #1
 8000638:	0018      	movs	r0, r3
 800063a:	f000 fd2b 	bl	8001094 <HAL_GPIO_WritePin>
	        // Transmit to UART2 for monitoring
//	        HAL_UART_Transmit(&huart2, transmitBuffer, 4, HAL_MAX_DELAY);


	        // Transmit to LoRa (hlpuart1)
	        HAL_UART_Transmit(&hlpuart1, transmitBuffer, 4, HAL_MAX_DELAY);
 800063e:	2301      	movs	r3, #1
 8000640:	425b      	negs	r3, r3
 8000642:	1d39      	adds	r1, r7, #4
 8000644:	4808      	ldr	r0, [pc, #32]	@ (8000668 <main+0x164>)
 8000646:	2204      	movs	r2, #4
 8000648:	f001 fc5e 	bl	8001f08 <HAL_UART_Transmit>
	        HAL_Delay(200);
 800064c:	20c8      	movs	r0, #200	@ 0xc8
 800064e:	f000 fad3 	bl	8000bf8 <HAL_Delay>
	        LED2_OFF;
 8000652:	2380      	movs	r3, #128	@ 0x80
 8000654:	0119      	lsls	r1, r3, #4
 8000656:	23a0      	movs	r3, #160	@ 0xa0
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	2200      	movs	r2, #0
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fd19 	bl	8001094 <HAL_GPIO_WritePin>
	     rxBuffer[0] = 0;
 8000662:	e7ab      	b.n	80005bc <main+0xb8>
 8000664:	50000400 	.word	0x50000400
 8000668:	20000078 	.word	0x20000078
 800066c:	00001388 	.word	0x00001388
 8000670:	080034c4 	.word	0x080034c4

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b09b      	sub	sp, #108	@ 0x6c
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	2434      	movs	r4, #52	@ 0x34
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2334      	movs	r3, #52	@ 0x34
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f002 fa93 	bl	8002bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	2320      	movs	r3, #32
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	0018      	movs	r0, r3
 8000690:	2314      	movs	r3, #20
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f002 fa8b 	bl	8002bb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	0018      	movs	r0, r3
 800069e:	231c      	movs	r3, #28
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f002 fa84 	bl	8002bb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	4b27      	ldr	r3, [pc, #156]	@ (8000748 <SystemClock_Config+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a27      	ldr	r2, [pc, #156]	@ (800074c <SystemClock_Config+0xd8>)
 80006ae:	401a      	ands	r2, r3
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <SystemClock_Config+0xd4>)
 80006b2:	2180      	movs	r1, #128	@ 0x80
 80006b4:	0109      	lsls	r1, r1, #4
 80006b6:	430a      	orrs	r2, r1
 80006b8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ba:	0021      	movs	r1, r4
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2210      	movs	r2, #16
 80006c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2201      	movs	r2, #1
 80006c6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	22a0      	movs	r2, #160	@ 0xa0
 80006d2:	0212      	lsls	r2, r2, #8
 80006d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 fcf6 	bl	80010d0 <HAL_RCC_OscConfig>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006e8:	f000 f904 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	2120      	movs	r1, #32
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	220f      	movs	r2, #15
 80006f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	187b      	adds	r3, r7, r1
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2100      	movs	r1, #0
 8000710:	0018      	movs	r0, r3
 8000712:	f001 f847 	bl	80017a4 <HAL_RCC_ClockConfig>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800071a:	f000 f8eb 	bl	80008f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1;
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2206      	movs	r2, #6
 8000722:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fa5a 	bl	8001bec <HAL_RCCEx_PeriphCLKConfig>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800073c:	f000 f8da 	bl	80008f4 <Error_Handler>
  }
}
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b01b      	add	sp, #108	@ 0x6c
 8000746:	bd90      	pop	{r4, r7, pc}
 8000748:	40007000 	.word	0x40007000
 800074c:	ffffe7ff 	.word	0xffffe7ff

08000750 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_LPUART1_UART_Init+0x54>)
 8000756:	4a14      	ldr	r2, [pc, #80]	@ (80007a8 <MX_LPUART1_UART_Init+0x58>)
 8000758:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_LPUART1_UART_Init+0x54>)
 800075c:	2296      	movs	r2, #150	@ 0x96
 800075e:	0192      	lsls	r2, r2, #6
 8000760:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <MX_LPUART1_UART_Init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_LPUART1_UART_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <MX_LPUART1_UART_Init+0x54>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_LPUART1_UART_Init+0x54>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <MX_LPUART1_UART_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_LPUART1_UART_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <MX_LPUART1_UART_Init+0x54>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <MX_LPUART1_UART_Init+0x54>)
 800078e:	0018      	movs	r0, r3
 8000790:	f001 fb66 	bl	8001e60 <HAL_UART_Init>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d001      	beq.n	800079c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000798:	f000 f8ac 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	20000078 	.word	0x20000078
 80007a8:	40004800 	.word	0x40004800

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	@ (8000808 <MX_USART2_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007b8:	2296      	movs	r2, #150	@ 0x96
 80007ba:	0192      	lsls	r2, r2, #6
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4b05      	ldr	r3, [pc, #20]	@ (8000804 <MX_USART2_UART_Init+0x58>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f001 fb35 	bl	8001e60 <HAL_UART_Init>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f87b 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000100 	.word	0x20000100
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b089      	sub	sp, #36	@ 0x24
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	240c      	movs	r4, #12
 8000814:	193b      	adds	r3, r7, r4
 8000816:	0018      	movs	r0, r3
 8000818:	2314      	movs	r3, #20
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f002 f9c7 	bl	8002bb0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b32      	ldr	r3, [pc, #200]	@ (80008ec <MX_GPIO_Init+0xe0>)
 8000824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000826:	4b31      	ldr	r3, [pc, #196]	@ (80008ec <MX_GPIO_Init+0xe0>)
 8000828:	2101      	movs	r1, #1
 800082a:	430a      	orrs	r2, r1
 800082c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800082e:	4b2f      	ldr	r3, [pc, #188]	@ (80008ec <MX_GPIO_Init+0xe0>)
 8000830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000832:	2201      	movs	r2, #1
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b2c      	ldr	r3, [pc, #176]	@ (80008ec <MX_GPIO_Init+0xe0>)
 800083c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800083e:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <MX_GPIO_Init+0xe0>)
 8000840:	2102      	movs	r1, #2
 8000842:	430a      	orrs	r2, r1
 8000844:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000846:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <MX_GPIO_Init+0xe0>)
 8000848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800084a:	2202      	movs	r2, #2
 800084c:	4013      	ands	r3, r2
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000852:	23e0      	movs	r3, #224	@ 0xe0
 8000854:	0159      	lsls	r1, r3, #5
 8000856:	23a0      	movs	r3, #160	@ 0xa0
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	2200      	movs	r2, #0
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fc19 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODE0_Pin|MODE1_Pin, GPIO_PIN_RESET);
 8000862:	4b23      	ldr	r3, [pc, #140]	@ (80008f0 <MX_GPIO_Init+0xe4>)
 8000864:	2200      	movs	r2, #0
 8000866:	2118      	movs	r1, #24
 8000868:	0018      	movs	r0, r3
 800086a:	f000 fc13 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUX_Pin */
  GPIO_InitStruct.Pin = AUX_Pin;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2280      	movs	r2, #128	@ 0x80
 8000872:	01d2      	lsls	r2, r2, #7
 8000874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000876:	193b      	adds	r3, r7, r4
 8000878:	2288      	movs	r2, #136	@ 0x88
 800087a:	0352      	lsls	r2, r2, #13
 800087c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AUX_GPIO_Port, &GPIO_InitStruct);
 8000884:	193b      	adds	r3, r7, r4
 8000886:	4a1a      	ldr	r2, [pc, #104]	@ (80008f0 <MX_GPIO_Init+0xe4>)
 8000888:	0019      	movs	r1, r3
 800088a:	0010      	movs	r0, r2
 800088c:	f000 fa8c 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000890:	0021      	movs	r1, r4
 8000892:	193b      	adds	r3, r7, r4
 8000894:	22e0      	movs	r2, #224	@ 0xe0
 8000896:	0152      	lsls	r2, r2, #5
 8000898:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	000c      	movs	r4, r1
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2201      	movs	r2, #1
 80008a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	193a      	adds	r2, r7, r4
 80008b0:	23a0      	movs	r3, #160	@ 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fa76 	bl	8000da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE0_Pin MODE1_Pin */
  GPIO_InitStruct.Pin = MODE0_Pin|MODE1_Pin;
 80008bc:	0021      	movs	r1, r4
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2218      	movs	r2, #24
 80008c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2201      	movs	r2, #1
 80008c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <MX_GPIO_Init+0xe4>)
 80008da:	0019      	movs	r1, r3
 80008dc:	0010      	movs	r0, r2
 80008de:	f000 fa63 	bl	8000da8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b009      	add	sp, #36	@ 0x24
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	40021000 	.word	0x40021000
 80008f0:	50000400 	.word	0x50000400

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	46c0      	nop			@ (mov r8, r8)
 80008fe:	e7fd      	b.n	80008fc <Error_Handler+0x8>

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <HAL_MspInit+0x24>)
 8000906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x24>)
 800090a:	2101      	movs	r1, #1
 800090c:	430a      	orrs	r2, r1
 800090e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <HAL_MspInit+0x24>)
 8000912:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000914:	4b03      	ldr	r3, [pc, #12]	@ (8000924 <HAL_MspInit+0x24>)
 8000916:	2180      	movs	r1, #128	@ 0x80
 8000918:	0549      	lsls	r1, r1, #21
 800091a:	430a      	orrs	r2, r1
 800091c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b08b      	sub	sp, #44	@ 0x2c
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	2414      	movs	r4, #20
 8000932:	193b      	adds	r3, r7, r4
 8000934:	0018      	movs	r0, r3
 8000936:	2314      	movs	r3, #20
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f002 f938 	bl	8002bb0 <memset>
  if(huart->Instance==LPUART1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a30      	ldr	r2, [pc, #192]	@ (8000a08 <HAL_UART_MspInit+0xe0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d12a      	bne.n	80009a0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800094a:	4b30      	ldr	r3, [pc, #192]	@ (8000a0c <HAL_UART_MspInit+0xe4>)
 800094c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800094e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a0c <HAL_UART_MspInit+0xe4>)
 8000950:	2180      	movs	r1, #128	@ 0x80
 8000952:	02c9      	lsls	r1, r1, #11
 8000954:	430a      	orrs	r2, r1
 8000956:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b2c      	ldr	r3, [pc, #176]	@ (8000a0c <HAL_UART_MspInit+0xe4>)
 800095a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800095c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a0c <HAL_UART_MspInit+0xe4>)
 800095e:	2102      	movs	r1, #2
 8000960:	430a      	orrs	r2, r1
 8000962:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000964:	4b29      	ldr	r3, [pc, #164]	@ (8000a0c <HAL_UART_MspInit+0xe4>)
 8000966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000968:	2202      	movs	r2, #2
 800096a:	4013      	ands	r3, r2
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	22c0      	movs	r2, #192	@ 0xc0
 8000974:	0112      	lsls	r2, r2, #4
 8000976:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	0021      	movs	r1, r4
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2202      	movs	r2, #2
 800097e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2203      	movs	r2, #3
 800098a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2204      	movs	r2, #4
 8000990:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	187b      	adds	r3, r7, r1
 8000994:	4a1e      	ldr	r2, [pc, #120]	@ (8000a10 <HAL_UART_MspInit+0xe8>)
 8000996:	0019      	movs	r1, r3
 8000998:	0010      	movs	r0, r2
 800099a:	f000 fa05 	bl	8000da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800099e:	e02e      	b.n	80009fe <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <HAL_UART_MspInit+0xec>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d129      	bne.n	80009fe <HAL_UART_MspInit+0xd6>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <HAL_UART_MspInit+0xe4>)
 80009ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <HAL_UART_MspInit+0xe4>)
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	0289      	lsls	r1, r1, #10
 80009b4:	430a      	orrs	r2, r1
 80009b6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <HAL_UART_MspInit+0xe4>)
 80009ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009bc:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <HAL_UART_MspInit+0xe4>)
 80009be:	2101      	movs	r1, #1
 80009c0:	430a      	orrs	r2, r1
 80009c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <HAL_UART_MspInit+0xe4>)
 80009c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c8:	2201      	movs	r2, #1
 80009ca:	4013      	ands	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d0:	2114      	movs	r1, #20
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	220c      	movs	r2, #12
 80009d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2202      	movs	r2, #2
 80009dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2203      	movs	r2, #3
 80009e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2204      	movs	r2, #4
 80009ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	187a      	adds	r2, r7, r1
 80009f2:	23a0      	movs	r3, #160	@ 0xa0
 80009f4:	05db      	lsls	r3, r3, #23
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f000 f9d5 	bl	8000da8 <HAL_GPIO_Init>
}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b00b      	add	sp, #44	@ 0x2c
 8000a04:	bd90      	pop	{r4, r7, pc}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	40004800 	.word	0x40004800
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	50000400 	.word	0x50000400
 8000a14:	40004400 	.word	0x40004400

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	e7fd      	b.n	8000a1c <NMI_Handler+0x4>

08000a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	e7fd      	b.n	8000a24 <HardFault_Handler+0x4>

08000a28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f8be 	bl	8000bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	@ (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	@ (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	18d3      	adds	r3, r2, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f002 f8a0 	bl	8002bc0 <__errno>
 8000a80:	0003      	movs	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	425b      	negs	r3, r3
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	18d2      	adds	r2, r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <_sbrk+0x64>)
 8000a9c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b006      	add	sp, #24
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20002000 	.word	0x20002000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	20000188 	.word	0x20000188
 8000ab4:	200002d8 	.word	0x200002d8

08000ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ac4:	480d      	ldr	r0, [pc, #52]	@ (8000afc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000ac6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac8:	f7ff fff6 	bl	8000ab8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000acc:	480c      	ldr	r0, [pc, #48]	@ (8000b00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ace:	490d      	ldr	r1, [pc, #52]	@ (8000b04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8000b08 <LoopForever+0xe>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad4:	e002      	b.n	8000adc <LoopCopyDataInit>

08000ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ada:	3304      	adds	r3, #4

08000adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae0:	d3f9      	bcc.n	8000ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8000b0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b10 <LoopForever+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae8:	e001      	b.n	8000aee <LoopFillZerobss>

08000aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aec:	3204      	adds	r2, #4

08000aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af0:	d3fb      	bcc.n	8000aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af2:	f002 f86b 	bl	8002bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af6:	f7ff fd05 	bl	8000504 <main>

08000afa <LoopForever>:

LoopForever:
    b LoopForever
 8000afa:	e7fe      	b.n	8000afa <LoopForever>
   ldr   r0, =_estack
 8000afc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b08:	08003590 	.word	0x08003590
  ldr r2, =_sbss
 8000b0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b10:	200002d8 	.word	0x200002d8

08000b14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_COMP_IRQHandler>
	...

08000b18 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b24:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <HAL_Init+0x3c>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <HAL_Init+0x3c>)
 8000b2a:	2140      	movs	r1, #64	@ 0x40
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f811 	bl	8000b58 <HAL_InitTick>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	701a      	strb	r2, [r3, #0]
 8000b40:	e001      	b.n	8000b46 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b42:	f7ff fedd 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
}
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	40022000 	.word	0x40022000

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <HAL_InitTick+0x5c>)
 8000b62:	681c      	ldr	r4, [r3, #0]
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <HAL_InitTick+0x60>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	0019      	movs	r1, r3
 8000b6a:	23fa      	movs	r3, #250	@ 0xfa
 8000b6c:	0098      	lsls	r0, r3, #2
 8000b6e:	f7ff fadd 	bl	800012c <__udivsi3>
 8000b72:	0003      	movs	r3, r0
 8000b74:	0019      	movs	r1, r3
 8000b76:	0020      	movs	r0, r4
 8000b78:	f7ff fad8 	bl	800012c <__udivsi3>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f905 	bl	8000d8e <HAL_SYSTICK_Config>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e00f      	b.n	8000bac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d80b      	bhi.n	8000baa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	2301      	movs	r3, #1
 8000b96:	425b      	negs	r3, r3
 8000b98:	2200      	movs	r2, #0
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 f8e2 	bl	8000d64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_InitTick+0x64>)
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b003      	add	sp, #12
 8000bb2:	bd90      	pop	{r4, r7, pc}
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_IncTick+0x1c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	001a      	movs	r2, r3
 8000bca:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	18d2      	adds	r2, r2, r3
 8000bd0:	4b03      	ldr	r3, [pc, #12]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bd2:	601a      	str	r2, [r3, #0]
}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	2000018c 	.word	0x2000018c

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b02      	ldr	r3, [pc, #8]	@ (8000bf4 <HAL_GetTick+0x10>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	2000018c 	.word	0x2000018c

08000bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c00:	f7ff fff0 	bl	8000be4 <HAL_GetTick>
 8000c04:	0003      	movs	r3, r0
 8000c06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	d005      	beq.n	8000c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <HAL_Delay+0x44>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	001a      	movs	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	189b      	adds	r3, r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	f7ff ffe0 	bl	8000be4 <HAL_GetTick>
 8000c24:	0002      	movs	r2, r0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d8f7      	bhi.n	8000c20 <HAL_Delay+0x28>
  {
  }
}
 8000c30:	46c0      	nop			@ (mov r8, r8)
 8000c32:	46c0      	nop			@ (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	b004      	add	sp, #16
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	20000008 	.word	0x20000008

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	0002      	movs	r2, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c54:	d828      	bhi.n	8000ca8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c56:	4a2f      	ldr	r2, [pc, #188]	@ (8000d14 <__NVIC_SetPriority+0xd4>)
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	33c0      	adds	r3, #192	@ 0xc0
 8000c62:	009b      	lsls	r3, r3, #2
 8000c64:	589b      	ldr	r3, [r3, r2]
 8000c66:	1dfa      	adds	r2, r7, #7
 8000c68:	7812      	ldrb	r2, [r2, #0]
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	400a      	ands	r2, r1
 8000c70:	00d2      	lsls	r2, r2, #3
 8000c72:	21ff      	movs	r1, #255	@ 0xff
 8000c74:	4091      	lsls	r1, r2
 8000c76:	000a      	movs	r2, r1
 8000c78:	43d2      	mvns	r2, r2
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	019b      	lsls	r3, r3, #6
 8000c82:	22ff      	movs	r2, #255	@ 0xff
 8000c84:	401a      	ands	r2, r3
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	4003      	ands	r3, r0
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c94:	481f      	ldr	r0, [pc, #124]	@ (8000d14 <__NVIC_SetPriority+0xd4>)
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	b25b      	sxtb	r3, r3
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	33c0      	adds	r3, #192	@ 0xc0
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ca6:	e031      	b.n	8000d0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d18 <__NVIC_SetPriority+0xd8>)
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	0019      	movs	r1, r3
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	400b      	ands	r3, r1
 8000cb4:	3b08      	subs	r3, #8
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	3306      	adds	r3, #6
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	18d3      	adds	r3, r2, r3
 8000cbe:	3304      	adds	r3, #4
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	1dfa      	adds	r2, r7, #7
 8000cc4:	7812      	ldrb	r2, [r2, #0]
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	2203      	movs	r2, #3
 8000cca:	400a      	ands	r2, r1
 8000ccc:	00d2      	lsls	r2, r2, #3
 8000cce:	21ff      	movs	r1, #255	@ 0xff
 8000cd0:	4091      	lsls	r1, r2
 8000cd2:	000a      	movs	r2, r1
 8000cd4:	43d2      	mvns	r2, r2
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	019b      	lsls	r3, r3, #6
 8000cde:	22ff      	movs	r2, #255	@ 0xff
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2303      	movs	r3, #3
 8000cea:	4003      	ands	r3, r0
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cf0:	4809      	ldr	r0, [pc, #36]	@ (8000d18 <__NVIC_SetPriority+0xd8>)
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	001c      	movs	r4, r3
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	4023      	ands	r3, r4
 8000cfc:	3b08      	subs	r3, #8
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	430a      	orrs	r2, r1
 8000d02:	3306      	adds	r3, #6
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	18c3      	adds	r3, r0, r3
 8000d08:	3304      	adds	r3, #4
 8000d0a:	601a      	str	r2, [r3, #0]
}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b003      	add	sp, #12
 8000d12:	bd90      	pop	{r4, r7, pc}
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	1e5a      	subs	r2, r3, #1
 8000d28:	2380      	movs	r3, #128	@ 0x80
 8000d2a:	045b      	lsls	r3, r3, #17
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d301      	bcc.n	8000d34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d30:	2301      	movs	r3, #1
 8000d32:	e010      	b.n	8000d56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d34:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <SysTick_Config+0x44>)
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	3a01      	subs	r2, #1
 8000d3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	425b      	negs	r3, r3
 8000d40:	2103      	movs	r1, #3
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff ff7c 	bl	8000c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <SysTick_Config+0x44>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <SysTick_Config+0x44>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	210f      	movs	r1, #15
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	1c02      	adds	r2, r0, #0
 8000d74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff ff5d 	bl	8000c40 <__NVIC_SetPriority>
}
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b004      	add	sp, #16
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff ffbf 	bl	8000d1c <SysTick_Config>
 8000d9e:	0003      	movs	r3, r0
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b002      	add	sp, #8
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dbe:	e14f      	b.n	8001060 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d100      	bne.n	8000dd8 <HAL_GPIO_Init+0x30>
 8000dd6:	e140      	b.n	800105a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d005      	beq.n	8000df0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d130      	bne.n	8000e52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	409a      	lsls	r2, r3
 8000e12:	0013      	movs	r3, r2
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e26:	2201      	movs	r2, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d017      	beq.n	8000e8e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d123      	bne.n	8000ee2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	58d3      	ldr	r3, [r2, r3]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2207      	movs	r2, #7
 8000eac:	4013      	ands	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2107      	movs	r1, #7
 8000ec6:	400b      	ands	r3, r1
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	6939      	ldr	r1, [r7, #16]
 8000ee0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	401a      	ands	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	23c0      	movs	r3, #192	@ 0xc0
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x17c>
 8000f22:	e09a      	b.n	800105a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f24:	4b54      	ldr	r3, [pc, #336]	@ (8001078 <HAL_GPIO_Init+0x2d0>)
 8000f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f28:	4b53      	ldr	r3, [pc, #332]	@ (8001078 <HAL_GPIO_Init+0x2d0>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f30:	4a52      	ldr	r2, [pc, #328]	@ (800107c <HAL_GPIO_Init+0x2d4>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	589b      	ldr	r3, [r3, r2]
 8000f3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	2203      	movs	r2, #3
 8000f42:	4013      	ands	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	23a0      	movs	r3, #160	@ 0xa0
 8000f58:	05db      	lsls	r3, r3, #23
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x1ea>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a47      	ldr	r2, [pc, #284]	@ (8001080 <HAL_GPIO_Init+0x2d8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x1e6>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a46      	ldr	r2, [pc, #280]	@ (8001084 <HAL_GPIO_Init+0x2dc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x1e2>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a45      	ldr	r2, [pc, #276]	@ (8001088 <HAL_GPIO_Init+0x2e0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x1de>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a44      	ldr	r2, [pc, #272]	@ (800108c <HAL_GPIO_Init+0x2e4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x1da>
 8000f7e:	2305      	movs	r3, #5
 8000f80:	e008      	b.n	8000f94 <HAL_GPIO_Init+0x1ec>
 8000f82:	2306      	movs	r3, #6
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x1ec>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x1ec>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x1ec>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x1ec>
 8000f92:	2300      	movs	r3, #0
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	2103      	movs	r1, #3
 8000f98:	400a      	ands	r2, r1
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa4:	4935      	ldr	r1, [pc, #212]	@ (800107c <HAL_GPIO_Init+0x2d4>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3302      	adds	r3, #2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb2:	4b37      	ldr	r3, [pc, #220]	@ (8001090 <HAL_GPIO_Init+0x2e8>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	2380      	movs	r3, #128	@ 0x80
 8000fc8:	035b      	lsls	r3, r3, #13
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001090 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001090 <HAL_GPIO_Init+0x2e8>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	039b      	lsls	r3, r3, #14
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001000:	4b23      	ldr	r3, [pc, #140]	@ (8001090 <HAL_GPIO_Init+0x2e8>)
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001006:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <HAL_GPIO_Init+0x2e8>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43da      	mvns	r2, r3
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	2380      	movs	r3, #128	@ 0x80
 800101c:	029b      	lsls	r3, r3, #10
 800101e:	4013      	ands	r3, r2
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800102a:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <HAL_GPIO_Init+0x2e8>)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_GPIO_Init+0x2e8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	43da      	mvns	r2, r3
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	2380      	movs	r3, #128	@ 0x80
 8001046:	025b      	lsls	r3, r3, #9
 8001048:	4013      	ands	r3, r2
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_GPIO_Init+0x2e8>)
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e13      	subs	r3, r2, #0
 800106a:	d000      	beq.n	800106e <HAL_GPIO_Init+0x2c6>
 800106c:	e6a8      	b.n	8000dc0 <HAL_GPIO_Init+0x18>
  }
}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b006      	add	sp, #24
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000
 8001080:	50000400 	.word	0x50000400
 8001084:	50000800 	.word	0x50000800
 8001088:	50000c00 	.word	0x50000c00
 800108c:	50001c00 	.word	0x50001c00
 8001090:	40010400 	.word	0x40010400

08001094 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	0008      	movs	r0, r1
 800109e:	0011      	movs	r1, r2
 80010a0:	1cbb      	adds	r3, r7, #2
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	1c7b      	adds	r3, r7, #1
 80010a8:	1c0a      	adds	r2, r1, #0
 80010aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ac:	1c7b      	adds	r3, r7, #1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b4:	1cbb      	adds	r3, r7, #2
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010bc:	e003      	b.n	80010c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010be:	1cbb      	adds	r3, r7, #2
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	f000 fb5a 	bl	8001798 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010e4:	4bce      	ldr	r3, [pc, #824]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	220c      	movs	r2, #12
 80010ea:	4013      	ands	r3, r2
 80010ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010ee:	4bcc      	ldr	r3, [pc, #816]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	2380      	movs	r3, #128	@ 0x80
 80010f4:	025b      	lsls	r3, r3, #9
 80010f6:	4013      	ands	r3, r2
 80010f8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2201      	movs	r2, #1
 8001100:	4013      	ands	r3, r2
 8001102:	d100      	bne.n	8001106 <HAL_RCC_OscConfig+0x36>
 8001104:	e07c      	b.n	8001200 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001106:	6a3b      	ldr	r3, [r7, #32]
 8001108:	2b08      	cmp	r3, #8
 800110a:	d007      	beq.n	800111c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	2b0c      	cmp	r3, #12
 8001110:	d111      	bne.n	8001136 <HAL_RCC_OscConfig+0x66>
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	2380      	movs	r3, #128	@ 0x80
 8001116:	025b      	lsls	r3, r3, #9
 8001118:	429a      	cmp	r2, r3
 800111a:	d10c      	bne.n	8001136 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111c:	4bc0      	ldr	r3, [pc, #768]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	029b      	lsls	r3, r3, #10
 8001124:	4013      	ands	r3, r2
 8001126:	d100      	bne.n	800112a <HAL_RCC_OscConfig+0x5a>
 8001128:	e069      	b.n	80011fe <HAL_RCC_OscConfig+0x12e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d165      	bne.n	80011fe <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e330      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	025b      	lsls	r3, r3, #9
 800113e:	429a      	cmp	r2, r3
 8001140:	d107      	bne.n	8001152 <HAL_RCC_OscConfig+0x82>
 8001142:	4bb7      	ldr	r3, [pc, #732]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4bb6      	ldr	r3, [pc, #728]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	0249      	lsls	r1, r1, #9
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e027      	b.n	80011a2 <HAL_RCC_OscConfig+0xd2>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	23a0      	movs	r3, #160	@ 0xa0
 8001158:	02db      	lsls	r3, r3, #11
 800115a:	429a      	cmp	r2, r3
 800115c:	d10e      	bne.n	800117c <HAL_RCC_OscConfig+0xac>
 800115e:	4bb0      	ldr	r3, [pc, #704]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4baf      	ldr	r3, [pc, #700]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001164:	2180      	movs	r1, #128	@ 0x80
 8001166:	02c9      	lsls	r1, r1, #11
 8001168:	430a      	orrs	r2, r1
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	4bac      	ldr	r3, [pc, #688]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4bab      	ldr	r3, [pc, #684]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001172:	2180      	movs	r1, #128	@ 0x80
 8001174:	0249      	lsls	r1, r1, #9
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e012      	b.n	80011a2 <HAL_RCC_OscConfig+0xd2>
 800117c:	4ba8      	ldr	r3, [pc, #672]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4ba7      	ldr	r3, [pc, #668]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001182:	49a8      	ldr	r1, [pc, #672]	@ (8001424 <HAL_RCC_OscConfig+0x354>)
 8001184:	400a      	ands	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	4ba5      	ldr	r3, [pc, #660]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	025b      	lsls	r3, r3, #9
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4ba2      	ldr	r3, [pc, #648]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4ba1      	ldr	r3, [pc, #644]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800119c:	49a2      	ldr	r1, [pc, #648]	@ (8001428 <HAL_RCC_OscConfig+0x358>)
 800119e:	400a      	ands	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d014      	beq.n	80011d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff fd1b 	bl	8000be4 <HAL_GetTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fd16 	bl	8000be4 <HAL_GetTick>
 80011b8:	0002      	movs	r2, r0
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	@ 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e2e8      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011c6:	4b96      	ldr	r3, [pc, #600]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	2380      	movs	r3, #128	@ 0x80
 80011cc:	029b      	lsls	r3, r3, #10
 80011ce:	4013      	ands	r3, r2
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xe4>
 80011d2:	e015      	b.n	8001200 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fd06 	bl	8000be4 <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011de:	f7ff fd01 	bl	8000be4 <HAL_GetTick>
 80011e2:	0002      	movs	r2, r0
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b64      	cmp	r3, #100	@ 0x64
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e2d3      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011f0:	4b8b      	ldr	r3, [pc, #556]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	@ 0x80
 80011f6:	029b      	lsls	r3, r3, #10
 80011f8:	4013      	ands	r3, r2
 80011fa:	d1f0      	bne.n	80011de <HAL_RCC_OscConfig+0x10e>
 80011fc:	e000      	b.n	8001200 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2202      	movs	r2, #2
 8001206:	4013      	ands	r3, r2
 8001208:	d100      	bne.n	800120c <HAL_RCC_OscConfig+0x13c>
 800120a:	e08b      	b.n	8001324 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d005      	beq.n	8001224 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	2b0c      	cmp	r3, #12
 800121c:	d13e      	bne.n	800129c <HAL_RCC_OscConfig+0x1cc>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d13b      	bne.n	800129c <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001224:	4b7e      	ldr	r3, [pc, #504]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2204      	movs	r2, #4
 800122a:	4013      	ands	r3, r2
 800122c:	d004      	beq.n	8001238 <HAL_RCC_OscConfig+0x168>
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e2af      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b79      	ldr	r3, [pc, #484]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a7b      	ldr	r2, [pc, #492]	@ (800142c <HAL_RCC_OscConfig+0x35c>)
 800123e:	4013      	ands	r3, r2
 8001240:	0019      	movs	r1, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	021a      	lsls	r2, r3, #8
 8001248:	4b75      	ldr	r3, [pc, #468]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800124a:	430a      	orrs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800124e:	4b74      	ldr	r3, [pc, #464]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2209      	movs	r2, #9
 8001254:	4393      	bics	r3, r2
 8001256:	0019      	movs	r1, r3
 8001258:	4b71      	ldr	r3, [pc, #452]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001260:	f000 fbe8 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 8001264:	0001      	movs	r1, r0
 8001266:	4b6e      	ldr	r3, [pc, #440]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	091b      	lsrs	r3, r3, #4
 800126c:	220f      	movs	r2, #15
 800126e:	4013      	ands	r3, r2
 8001270:	4a6f      	ldr	r2, [pc, #444]	@ (8001430 <HAL_RCC_OscConfig+0x360>)
 8001272:	5cd3      	ldrb	r3, [r2, r3]
 8001274:	000a      	movs	r2, r1
 8001276:	40da      	lsrs	r2, r3
 8001278:	4b6e      	ldr	r3, [pc, #440]	@ (8001434 <HAL_RCC_OscConfig+0x364>)
 800127a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800127c:	4b6e      	ldr	r3, [pc, #440]	@ (8001438 <HAL_RCC_OscConfig+0x368>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2513      	movs	r5, #19
 8001282:	197c      	adds	r4, r7, r5
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff fc67 	bl	8000b58 <HAL_InitTick>
 800128a:	0003      	movs	r3, r0
 800128c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800128e:	197b      	adds	r3, r7, r5
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d046      	beq.n	8001324 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8001296:	197b      	adds	r3, r7, r5
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	e27d      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d027      	beq.n	80012f2 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2209      	movs	r2, #9
 80012a8:	4393      	bics	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	4b5c      	ldr	r3, [pc, #368]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	430a      	orrs	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc96 	bl	8000be4 <HAL_GetTick>
 80012b8:	0003      	movs	r3, r0
 80012ba:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012be:	f7ff fc91 	bl	8000be4 <HAL_GetTick>
 80012c2:	0002      	movs	r2, r0
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e263      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012d0:	4b53      	ldr	r3, [pc, #332]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2204      	movs	r2, #4
 80012d6:	4013      	ands	r3, r2
 80012d8:	d0f1      	beq.n	80012be <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	4b51      	ldr	r3, [pc, #324]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4a53      	ldr	r2, [pc, #332]	@ (800142c <HAL_RCC_OscConfig+0x35c>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	0019      	movs	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	021a      	lsls	r2, r3, #8
 80012ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80012ec:	430a      	orrs	r2, r1
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	e018      	b.n	8001324 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80012f8:	2101      	movs	r1, #1
 80012fa:	438a      	bics	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff fc71 	bl	8000be4 <HAL_GetTick>
 8001302:	0003      	movs	r3, r0
 8001304:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff fc6c 	bl	8000be4 <HAL_GetTick>
 800130c:	0002      	movs	r2, r0
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e23e      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800131a:	4b41      	ldr	r3, [pc, #260]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2204      	movs	r2, #4
 8001320:	4013      	ands	r3, r2
 8001322:	d1f1      	bne.n	8001308 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2210      	movs	r2, #16
 800132a:	4013      	ands	r3, r2
 800132c:	d100      	bne.n	8001330 <HAL_RCC_OscConfig+0x260>
 800132e:	e0a1      	b.n	8001474 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d140      	bne.n	80013b8 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001336:	4b3a      	ldr	r3, [pc, #232]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4013      	ands	r3, r2
 8001340:	d005      	beq.n	800134e <HAL_RCC_OscConfig+0x27e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e224      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134e:	4b34      	ldr	r3, [pc, #208]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4a3a      	ldr	r2, [pc, #232]	@ (800143c <HAL_RCC_OscConfig+0x36c>)
 8001354:	4013      	ands	r3, r2
 8001356:	0019      	movs	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1a      	ldr	r2, [r3, #32]
 800135c:	4b30      	ldr	r3, [pc, #192]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800135e:	430a      	orrs	r2, r1
 8001360:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001362:	4b2f      	ldr	r3, [pc, #188]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	0a19      	lsrs	r1, r3, #8
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	061a      	lsls	r2, r3, #24
 8001370:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001372:	430a      	orrs	r2, r1
 8001374:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	0b5b      	lsrs	r3, r3, #13
 800137c:	3301      	adds	r3, #1
 800137e:	2280      	movs	r2, #128	@ 0x80
 8001380:	0212      	lsls	r2, r2, #8
 8001382:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001384:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	210f      	movs	r1, #15
 800138c:	400b      	ands	r3, r1
 800138e:	4928      	ldr	r1, [pc, #160]	@ (8001430 <HAL_RCC_OscConfig+0x360>)
 8001390:	5ccb      	ldrb	r3, [r1, r3]
 8001392:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <HAL_RCC_OscConfig+0x364>)
 8001396:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001398:	4b27      	ldr	r3, [pc, #156]	@ (8001438 <HAL_RCC_OscConfig+0x368>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2513      	movs	r5, #19
 800139e:	197c      	adds	r4, r7, r5
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7ff fbd9 	bl	8000b58 <HAL_InitTick>
 80013a6:	0003      	movs	r3, r0
 80013a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80013aa:	197b      	adds	r3, r7, r5
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d060      	beq.n	8001474 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 80013b2:	197b      	adds	r3, r7, r5
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	e1ef      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d03f      	beq.n	8001440 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013c0:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80013c6:	2180      	movs	r1, #128	@ 0x80
 80013c8:	0049      	lsls	r1, r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ce:	f7ff fc09 	bl	8000be4 <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc04 	bl	8000be4 <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e1d6      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4013      	ands	r3, r2
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <HAL_RCC_OscConfig+0x36c>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	0019      	movs	r1, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1a      	ldr	r2, [r3, #32]
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 8001406:	430a      	orrs	r2, r1
 8001408:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800140a:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	0a19      	lsrs	r1, r3, #8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	061a      	lsls	r2, r3, #24
 8001418:	4b01      	ldr	r3, [pc, #4]	@ (8001420 <HAL_RCC_OscConfig+0x350>)
 800141a:	430a      	orrs	r2, r1
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	e029      	b.n	8001474 <HAL_RCC_OscConfig+0x3a4>
 8001420:	40021000 	.word	0x40021000
 8001424:	fffeffff 	.word	0xfffeffff
 8001428:	fffbffff 	.word	0xfffbffff
 800142c:	ffffe0ff 	.word	0xffffe0ff
 8001430:	080034e0 	.word	0x080034e0
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004
 800143c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001440:	4bbe      	ldr	r3, [pc, #760]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4bbd      	ldr	r3, [pc, #756]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001446:	49be      	ldr	r1, [pc, #760]	@ (8001740 <HAL_RCC_OscConfig+0x670>)
 8001448:	400a      	ands	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fbca 	bl	8000be4 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001456:	f7ff fbc5 	bl	8000be4 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e197      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001468:	4bb4      	ldr	r3, [pc, #720]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2380      	movs	r3, #128	@ 0x80
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d1f0      	bne.n	8001456 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2208      	movs	r2, #8
 800147a:	4013      	ands	r3, r2
 800147c:	d036      	beq.n	80014ec <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d019      	beq.n	80014ba <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001486:	4bad      	ldr	r3, [pc, #692]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001488:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800148a:	4bac      	ldr	r3, [pc, #688]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 800148c:	2101      	movs	r1, #1
 800148e:	430a      	orrs	r2, r1
 8001490:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fba7 	bl	8000be4 <HAL_GetTick>
 8001496:	0003      	movs	r3, r0
 8001498:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800149c:	f7ff fba2 	bl	8000be4 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e174      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ae:	4ba3      	ldr	r3, [pc, #652]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80014b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014b2:	2202      	movs	r2, #2
 80014b4:	4013      	ands	r3, r2
 80014b6:	d0f1      	beq.n	800149c <HAL_RCC_OscConfig+0x3cc>
 80014b8:	e018      	b.n	80014ec <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ba:	4ba0      	ldr	r3, [pc, #640]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80014bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014be:	4b9f      	ldr	r3, [pc, #636]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	438a      	bics	r2, r1
 80014c4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fb8d 	bl	8000be4 <HAL_GetTick>
 80014ca:	0003      	movs	r3, r0
 80014cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fb88 	bl	8000be4 <HAL_GetTick>
 80014d4:	0002      	movs	r2, r0
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e15a      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014e2:	4b96      	ldr	r3, [pc, #600]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80014e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014e6:	2202      	movs	r2, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d1f1      	bne.n	80014d0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2204      	movs	r2, #4
 80014f2:	4013      	ands	r3, r2
 80014f4:	d100      	bne.n	80014f8 <HAL_RCC_OscConfig+0x428>
 80014f6:	e0ae      	b.n	8001656 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f8:	2027      	movs	r0, #39	@ 0x27
 80014fa:	183b      	adds	r3, r7, r0
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001500:	4b8e      	ldr	r3, [pc, #568]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001502:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	055b      	lsls	r3, r3, #21
 8001508:	4013      	ands	r3, r2
 800150a:	d109      	bne.n	8001520 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150c:	4b8b      	ldr	r3, [pc, #556]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 800150e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001510:	4b8a      	ldr	r3, [pc, #552]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001512:	2180      	movs	r1, #128	@ 0x80
 8001514:	0549      	lsls	r1, r1, #21
 8001516:	430a      	orrs	r2, r1
 8001518:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800151a:	183b      	adds	r3, r7, r0
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001520:	4b88      	ldr	r3, [pc, #544]	@ (8001744 <HAL_RCC_OscConfig+0x674>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4013      	ands	r3, r2
 800152a:	d11a      	bne.n	8001562 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152c:	4b85      	ldr	r3, [pc, #532]	@ (8001744 <HAL_RCC_OscConfig+0x674>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b84      	ldr	r3, [pc, #528]	@ (8001744 <HAL_RCC_OscConfig+0x674>)
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	0049      	lsls	r1, r1, #1
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153a:	f7ff fb53 	bl	8000be4 <HAL_GetTick>
 800153e:	0003      	movs	r3, r0
 8001540:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001544:	f7ff fb4e 	bl	8000be4 <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	@ 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e120      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001556:	4b7b      	ldr	r3, [pc, #492]	@ (8001744 <HAL_RCC_OscConfig+0x674>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	2380      	movs	r3, #128	@ 0x80
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4013      	ands	r3, r2
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	2380      	movs	r3, #128	@ 0x80
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	429a      	cmp	r2, r3
 800156c:	d107      	bne.n	800157e <HAL_RCC_OscConfig+0x4ae>
 800156e:	4b73      	ldr	r3, [pc, #460]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001570:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001572:	4b72      	ldr	r3, [pc, #456]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001574:	2180      	movs	r1, #128	@ 0x80
 8001576:	0049      	lsls	r1, r1, #1
 8001578:	430a      	orrs	r2, r1
 800157a:	651a      	str	r2, [r3, #80]	@ 0x50
 800157c:	e031      	b.n	80015e2 <HAL_RCC_OscConfig+0x512>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4d0>
 8001586:	4b6d      	ldr	r3, [pc, #436]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001588:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800158a:	4b6c      	ldr	r3, [pc, #432]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 800158c:	496c      	ldr	r1, [pc, #432]	@ (8001740 <HAL_RCC_OscConfig+0x670>)
 800158e:	400a      	ands	r2, r1
 8001590:	651a      	str	r2, [r3, #80]	@ 0x50
 8001592:	4b6a      	ldr	r3, [pc, #424]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001594:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001596:	4b69      	ldr	r3, [pc, #420]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001598:	496b      	ldr	r1, [pc, #428]	@ (8001748 <HAL_RCC_OscConfig+0x678>)
 800159a:	400a      	ands	r2, r1
 800159c:	651a      	str	r2, [r3, #80]	@ 0x50
 800159e:	e020      	b.n	80015e2 <HAL_RCC_OscConfig+0x512>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	23a0      	movs	r3, #160	@ 0xa0
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d10e      	bne.n	80015ca <HAL_RCC_OscConfig+0x4fa>
 80015ac:	4b63      	ldr	r3, [pc, #396]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80015ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015b0:	4b62      	ldr	r3, [pc, #392]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80015b2:	2180      	movs	r1, #128	@ 0x80
 80015b4:	00c9      	lsls	r1, r1, #3
 80015b6:	430a      	orrs	r2, r1
 80015b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80015ba:	4b60      	ldr	r3, [pc, #384]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80015bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015be:	4b5f      	ldr	r3, [pc, #380]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80015c0:	2180      	movs	r1, #128	@ 0x80
 80015c2:	0049      	lsls	r1, r1, #1
 80015c4:	430a      	orrs	r2, r1
 80015c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x512>
 80015ca:	4b5c      	ldr	r3, [pc, #368]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80015cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015ce:	4b5b      	ldr	r3, [pc, #364]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80015d0:	495b      	ldr	r1, [pc, #364]	@ (8001740 <HAL_RCC_OscConfig+0x670>)
 80015d2:	400a      	ands	r2, r1
 80015d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80015d6:	4b59      	ldr	r3, [pc, #356]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80015d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015da:	4b58      	ldr	r3, [pc, #352]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80015dc:	495a      	ldr	r1, [pc, #360]	@ (8001748 <HAL_RCC_OscConfig+0x678>)
 80015de:	400a      	ands	r2, r1
 80015e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fafb 	bl	8000be4 <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015f2:	e009      	b.n	8001608 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff faf6 	bl	8000be4 <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	4a53      	ldr	r2, [pc, #332]	@ (800174c <HAL_RCC_OscConfig+0x67c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0c7      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001608:	4b4c      	ldr	r3, [pc, #304]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 800160a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d0ef      	beq.n	80015f4 <HAL_RCC_OscConfig+0x524>
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fae5 	bl	8000be4 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800161e:	e009      	b.n	8001634 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001620:	f7ff fae0 	bl	8000be4 <HAL_GetTick>
 8001624:	0002      	movs	r2, r0
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	4a48      	ldr	r2, [pc, #288]	@ (800174c <HAL_RCC_OscConfig+0x67c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0b1      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001634:	4b41      	ldr	r3, [pc, #260]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001636:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4013      	ands	r3, r2
 800163e:	d1ef      	bne.n	8001620 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001640:	2327      	movs	r3, #39	@ 0x27
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d105      	bne.n	8001656 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164a:	4b3c      	ldr	r3, [pc, #240]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 800164c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800164e:	4b3b      	ldr	r3, [pc, #236]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001650:	493f      	ldr	r1, [pc, #252]	@ (8001750 <HAL_RCC_OscConfig+0x680>)
 8001652:	400a      	ands	r2, r1
 8001654:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	2b00      	cmp	r3, #0
 800165c:	d100      	bne.n	8001660 <HAL_RCC_OscConfig+0x590>
 800165e:	e09a      	b.n	8001796 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d064      	beq.n	8001730 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166a:	2b02      	cmp	r3, #2
 800166c:	d145      	bne.n	80016fa <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b33      	ldr	r3, [pc, #204]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b32      	ldr	r3, [pc, #200]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001674:	4937      	ldr	r1, [pc, #220]	@ (8001754 <HAL_RCC_OscConfig+0x684>)
 8001676:	400a      	ands	r2, r1
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fab3 	bl	8000be4 <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff faae 	bl	8000be4 <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e080      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001696:	4b29      	ldr	r3, [pc, #164]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	049b      	lsls	r3, r3, #18
 800169e:	4013      	ands	r3, r2
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a2:	4b26      	ldr	r3, [pc, #152]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001758 <HAL_RCC_OscConfig+0x688>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	0019      	movs	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016b4:	431a      	orrs	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	431a      	orrs	r2, r3
 80016bc:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80016be:	430a      	orrs	r2, r1
 80016c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c2:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80016c8:	2180      	movs	r1, #128	@ 0x80
 80016ca:	0449      	lsls	r1, r1, #17
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fa88 	bl	8000be4 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff fa83 	bl	8000be4 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e055      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80016ec:	4b13      	ldr	r3, [pc, #76]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	049b      	lsls	r3, r3, #18
 80016f4:	4013      	ands	r3, r2
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x60a>
 80016f8:	e04d      	b.n	8001796 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b10      	ldr	r3, [pc, #64]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001700:	4914      	ldr	r1, [pc, #80]	@ (8001754 <HAL_RCC_OscConfig+0x684>)
 8001702:	400a      	ands	r2, r1
 8001704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff fa6d 	bl	8000be4 <HAL_GetTick>
 800170a:	0003      	movs	r3, r0
 800170c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff fa68 	bl	8000be4 <HAL_GetTick>
 8001714:	0002      	movs	r2, r0
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e03a      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001722:	4b06      	ldr	r3, [pc, #24]	@ (800173c <HAL_RCC_OscConfig+0x66c>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	2380      	movs	r3, #128	@ 0x80
 8001728:	049b      	lsls	r3, r3, #18
 800172a:	4013      	ands	r3, r2
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x640>
 800172e:	e032      	b.n	8001796 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	2b01      	cmp	r3, #1
 8001736:	d111      	bne.n	800175c <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e02d      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
 800173c:	40021000 	.word	0x40021000
 8001740:	fffffeff 	.word	0xfffffeff
 8001744:	40007000 	.word	0x40007000
 8001748:	fffffbff 	.word	0xfffffbff
 800174c:	00001388 	.word	0x00001388
 8001750:	efffffff 	.word	0xefffffff
 8001754:	feffffff 	.word	0xfeffffff
 8001758:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800175c:	4b10      	ldr	r3, [pc, #64]	@ (80017a0 <HAL_RCC_OscConfig+0x6d0>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	025b      	lsls	r3, r3, #9
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800176e:	429a      	cmp	r2, r3
 8001770:	d10f      	bne.n	8001792 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	23f0      	movs	r3, #240	@ 0xf0
 8001776:	039b      	lsls	r3, r3, #14
 8001778:	401a      	ands	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d107      	bne.n	8001792 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	23c0      	movs	r3, #192	@ 0xc0
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	401a      	ands	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	0018      	movs	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	b00a      	add	sp, #40	@ 0x28
 800179e:	bdb0      	pop	{r4, r5, r7, pc}
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b5b0      	push	{r4, r5, r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e128      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b96      	ldr	r3, [pc, #600]	@ (8001a14 <HAL_RCC_ClockConfig+0x270>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d91e      	bls.n	8001804 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b93      	ldr	r3, [pc, #588]	@ (8001a14 <HAL_RCC_ClockConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2201      	movs	r2, #1
 80017cc:	4393      	bics	r3, r2
 80017ce:	0019      	movs	r1, r3
 80017d0:	4b90      	ldr	r3, [pc, #576]	@ (8001a14 <HAL_RCC_ClockConfig+0x270>)
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017d8:	f7ff fa04 	bl	8000be4 <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e0:	e009      	b.n	80017f6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e2:	f7ff f9ff 	bl	8000be4 <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	4a8a      	ldr	r2, [pc, #552]	@ (8001a18 <HAL_RCC_ClockConfig+0x274>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e109      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b87      	ldr	r3, [pc, #540]	@ (8001a14 <HAL_RCC_ClockConfig+0x270>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d1ee      	bne.n	80017e2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2202      	movs	r2, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d009      	beq.n	8001822 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180e:	4b83      	ldr	r3, [pc, #524]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	22f0      	movs	r2, #240	@ 0xf0
 8001814:	4393      	bics	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	4b7f      	ldr	r3, [pc, #508]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 800181e:	430a      	orrs	r2, r1
 8001820:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2201      	movs	r2, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d100      	bne.n	800182e <HAL_RCC_ClockConfig+0x8a>
 800182c:	e089      	b.n	8001942 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001836:	4b79      	ldr	r3, [pc, #484]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	029b      	lsls	r3, r3, #10
 800183e:	4013      	ands	r3, r2
 8001840:	d120      	bne.n	8001884 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0e1      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800184e:	4b73      	ldr	r3, [pc, #460]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	2380      	movs	r3, #128	@ 0x80
 8001854:	049b      	lsls	r3, r3, #18
 8001856:	4013      	ands	r3, r2
 8001858:	d114      	bne.n	8001884 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0d5      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d106      	bne.n	8001874 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001866:	4b6d      	ldr	r3, [pc, #436]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2204      	movs	r2, #4
 800186c:	4013      	ands	r3, r2
 800186e:	d109      	bne.n	8001884 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0ca      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001874:	4b69      	ldr	r3, [pc, #420]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4013      	ands	r3, r2
 800187e:	d101      	bne.n	8001884 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0c2      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001884:	4b65      	ldr	r3, [pc, #404]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2203      	movs	r2, #3
 800188a:	4393      	bics	r3, r2
 800188c:	0019      	movs	r1, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4b62      	ldr	r3, [pc, #392]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 8001894:	430a      	orrs	r2, r1
 8001896:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001898:	f7ff f9a4 	bl	8000be4 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d111      	bne.n	80018cc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a8:	e009      	b.n	80018be <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018aa:	f7ff f99b 	bl	8000be4 <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	4a58      	ldr	r2, [pc, #352]	@ (8001a18 <HAL_RCC_ClockConfig+0x274>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e0a5      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018be:	4b57      	ldr	r3, [pc, #348]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	220c      	movs	r2, #12
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d1ef      	bne.n	80018aa <HAL_RCC_ClockConfig+0x106>
 80018ca:	e03a      	b.n	8001942 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d111      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d4:	e009      	b.n	80018ea <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d6:	f7ff f985 	bl	8000be4 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001a18 <HAL_RCC_ClockConfig+0x274>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e08f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ea:	4b4c      	ldr	r3, [pc, #304]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	220c      	movs	r2, #12
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d1ef      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x132>
 80018f6:	e024      	b.n	8001942 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d11b      	bne.n	8001938 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001900:	e009      	b.n	8001916 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001902:	f7ff f96f 	bl	8000be4 <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	4a42      	ldr	r2, [pc, #264]	@ (8001a18 <HAL_RCC_ClockConfig+0x274>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e079      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001916:	4b41      	ldr	r3, [pc, #260]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	220c      	movs	r2, #12
 800191c:	4013      	ands	r3, r2
 800191e:	2b04      	cmp	r3, #4
 8001920:	d1ef      	bne.n	8001902 <HAL_RCC_ClockConfig+0x15e>
 8001922:	e00e      	b.n	8001942 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff f95e 	bl	8000be4 <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4a3a      	ldr	r2, [pc, #232]	@ (8001a18 <HAL_RCC_ClockConfig+0x274>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e068      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001938:	4b38      	ldr	r3, [pc, #224]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	220c      	movs	r2, #12
 800193e:	4013      	ands	r3, r2
 8001940:	d1f0      	bne.n	8001924 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001942:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <HAL_RCC_ClockConfig+0x270>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	4013      	ands	r3, r2
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d21e      	bcs.n	800198e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001950:	4b30      	ldr	r3, [pc, #192]	@ (8001a14 <HAL_RCC_ClockConfig+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2201      	movs	r2, #1
 8001956:	4393      	bics	r3, r2
 8001958:	0019      	movs	r1, r3
 800195a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <HAL_RCC_ClockConfig+0x270>)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001962:	f7ff f93f 	bl	8000be4 <HAL_GetTick>
 8001966:	0003      	movs	r3, r0
 8001968:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	e009      	b.n	8001980 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7ff f93a 	bl	8000be4 <HAL_GetTick>
 8001970:	0002      	movs	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	4a28      	ldr	r2, [pc, #160]	@ (8001a18 <HAL_RCC_ClockConfig+0x274>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e044      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001980:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <HAL_RCC_ClockConfig+0x270>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2201      	movs	r2, #1
 8001986:	4013      	ands	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d1ee      	bne.n	800196c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2204      	movs	r2, #4
 8001994:	4013      	ands	r3, r2
 8001996:	d009      	beq.n	80019ac <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	4a20      	ldr	r2, [pc, #128]	@ (8001a20 <HAL_RCC_ClockConfig+0x27c>)
 800199e:	4013      	ands	r3, r2
 80019a0:	0019      	movs	r1, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 80019a8:	430a      	orrs	r2, r1
 80019aa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2208      	movs	r2, #8
 80019b2:	4013      	ands	r3, r2
 80019b4:	d00a      	beq.n	80019cc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019b6:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001a24 <HAL_RCC_ClockConfig+0x280>)
 80019bc:	4013      	ands	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	00da      	lsls	r2, r3, #3
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 80019c8:	430a      	orrs	r2, r1
 80019ca:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019cc:	f000 f832 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80019d0:	0001      	movs	r1, r0
 80019d2:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_RCC_ClockConfig+0x278>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	220f      	movs	r2, #15
 80019da:	4013      	ands	r3, r2
 80019dc:	4a12      	ldr	r2, [pc, #72]	@ (8001a28 <HAL_RCC_ClockConfig+0x284>)
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	000a      	movs	r2, r1
 80019e2:	40da      	lsrs	r2, r3
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <HAL_RCC_ClockConfig+0x288>)
 80019e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019e8:	4b11      	ldr	r3, [pc, #68]	@ (8001a30 <HAL_RCC_ClockConfig+0x28c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	250b      	movs	r5, #11
 80019ee:	197c      	adds	r4, r7, r5
 80019f0:	0018      	movs	r0, r3
 80019f2:	f7ff f8b1 	bl	8000b58 <HAL_InitTick>
 80019f6:	0003      	movs	r3, r0
 80019f8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80019fa:	197b      	adds	r3, r7, r5
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d002      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a02:	197b      	adds	r3, r7, r5
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b004      	add	sp, #16
 8001a10:	bdb0      	pop	{r4, r5, r7, pc}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	40022000 	.word	0x40022000
 8001a18:	00001388 	.word	0x00001388
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	fffff8ff 	.word	0xfffff8ff
 8001a24:	ffffc7ff 	.word	0xffffc7ff
 8001a28:	080034e0 	.word	0x080034e0
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b08e      	sub	sp, #56	@ 0x38
 8001a38:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a3a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a42:	230c      	movs	r3, #12
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b0c      	cmp	r3, #12
 8001a48:	d014      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x40>
 8001a4a:	d900      	bls.n	8001a4e <HAL_RCC_GetSysClockFreq+0x1a>
 8001a4c:	e07b      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x112>
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d002      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x24>
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d00b      	beq.n	8001a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a56:	e076      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001a58:	4b44      	ldr	r3, [pc, #272]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2210      	movs	r2, #16
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d002      	beq.n	8001a68 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001a62:	4b43      	ldr	r3, [pc, #268]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001a64:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001a66:	e07c      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001a68:	4b42      	ldr	r3, [pc, #264]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x140>)
 8001a6a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001a6c:	e079      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a6e:	4b42      	ldr	r3, [pc, #264]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x144>)
 8001a70:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001a72:	e076      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a76:	0c9a      	lsrs	r2, r3, #18
 8001a78:	230f      	movs	r3, #15
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x148>)
 8001a7e:	5c9b      	ldrb	r3, [r3, r2]
 8001a80:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a84:	0d9a      	lsrs	r2, r3, #22
 8001a86:	2303      	movs	r3, #3
 8001a88:	4013      	ands	r3, r2
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8e:	4b37      	ldr	r3, [pc, #220]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	2380      	movs	r3, #128	@ 0x80
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	4013      	ands	r3, r2
 8001a98:	d01a      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	4a35      	ldr	r2, [pc, #212]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x144>)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	69b8      	ldr	r0, [r7, #24]
 8001aa8:	69f9      	ldr	r1, [r7, #28]
 8001aaa:	f7fe fbeb 	bl	8000284 <__aeabi_lmul>
 8001aae:	0002      	movs	r2, r0
 8001ab0:	000b      	movs	r3, r1
 8001ab2:	0010      	movs	r0, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	613b      	str	r3, [r7, #16]
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f7fe fbbf 	bl	8000244 <__aeabi_uldivmod>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	000b      	movs	r3, r1
 8001aca:	0013      	movs	r3, r2
 8001acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ace:	e037      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ad0:	4b26      	ldr	r3, [pc, #152]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d01a      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4a23      	ldr	r2, [pc, #140]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	68b8      	ldr	r0, [r7, #8]
 8001ae8:	68f9      	ldr	r1, [r7, #12]
 8001aea:	f7fe fbcb 	bl	8000284 <__aeabi_lmul>
 8001aee:	0002      	movs	r2, r0
 8001af0:	000b      	movs	r3, r1
 8001af2:	0010      	movs	r0, r2
 8001af4:	0019      	movs	r1, r3
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	603b      	str	r3, [r7, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f7fe fb9f 	bl	8000244 <__aeabi_uldivmod>
 8001b06:	0002      	movs	r2, r0
 8001b08:	000b      	movs	r3, r1
 8001b0a:	0013      	movs	r3, r2
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b0e:	e017      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b12:	0018      	movs	r0, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	0019      	movs	r1, r3
 8001b18:	4a16      	ldr	r2, [pc, #88]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f7fe fbb2 	bl	8000284 <__aeabi_lmul>
 8001b20:	0002      	movs	r2, r0
 8001b22:	000b      	movs	r3, r1
 8001b24:	0010      	movs	r0, r2
 8001b26:	0019      	movs	r1, r3
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	001c      	movs	r4, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	001d      	movs	r5, r3
 8001b30:	0022      	movs	r2, r4
 8001b32:	002b      	movs	r3, r5
 8001b34:	f7fe fb86 	bl	8000244 <__aeabi_uldivmod>
 8001b38:	0002      	movs	r2, r0
 8001b3a:	000b      	movs	r3, r1
 8001b3c:	0013      	movs	r3, r2
 8001b3e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b42:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001b44:	e00d      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	0b5b      	lsrs	r3, r3, #13
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	4013      	ands	r3, r2
 8001b50:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b52:	6a3b      	ldr	r3, [r7, #32]
 8001b54:	3301      	adds	r3, #1
 8001b56:	2280      	movs	r2, #128	@ 0x80
 8001b58:	0212      	lsls	r2, r2, #8
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001b60:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b00e      	add	sp, #56	@ 0x38
 8001b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	003d0900 	.word	0x003d0900
 8001b74:	00f42400 	.word	0x00f42400
 8001b78:	007a1200 	.word	0x007a1200
 8001b7c:	080034f8 	.word	0x080034f8

08001b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b84:	4b02      	ldr	r3, [pc, #8]	@ (8001b90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	20000000 	.word	0x20000000

08001b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b98:	f7ff fff2 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001b9c:	0001      	movs	r1, r0
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	0a1b      	lsrs	r3, r3, #8
 8001ba4:	2207      	movs	r2, #7
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001baa:	5cd3      	ldrb	r3, [r2, r3]
 8001bac:	40d9      	lsrs	r1, r3
 8001bae:	000b      	movs	r3, r1
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	080034f0 	.word	0x080034f0

08001bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bc4:	f7ff ffdc 	bl	8001b80 <HAL_RCC_GetHCLKFreq>
 8001bc8:	0001      	movs	r1, r0
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	0adb      	lsrs	r3, r3, #11
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bd6:	5cd3      	ldrb	r3, [r2, r3]
 8001bd8:	40d9      	lsrs	r1, r3
 8001bda:	000b      	movs	r3, r1
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	40021000 	.word	0x40021000
 8001be8:	080034f0 	.word	0x080034f0

08001bec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001bf4:	2017      	movs	r0, #23
 8001bf6:	183b      	adds	r3, r7, r0
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2220      	movs	r2, #32
 8001c02:	4013      	ands	r3, r2
 8001c04:	d100      	bne.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001c06:	e0c7      	b.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c08:	4b8b      	ldr	r3, [pc, #556]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	055b      	lsls	r3, r3, #21
 8001c10:	4013      	ands	r3, r2
 8001c12:	d109      	bne.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c14:	4b88      	ldr	r3, [pc, #544]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c18:	4b87      	ldr	r3, [pc, #540]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c1a:	2180      	movs	r1, #128	@ 0x80
 8001c1c:	0549      	lsls	r1, r1, #21
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001c22:	183b      	adds	r3, r7, r0
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	4b84      	ldr	r3, [pc, #528]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	4013      	ands	r3, r2
 8001c32:	d11a      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c34:	4b81      	ldr	r3, [pc, #516]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b80      	ldr	r3, [pc, #512]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c3a:	2180      	movs	r1, #128	@ 0x80
 8001c3c:	0049      	lsls	r1, r1, #1
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c42:	f7fe ffcf 	bl	8000be4 <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4a:	e008      	b.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4c:	f7fe ffca 	bl	8000be4 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	@ 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0e8      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5e:	4b77      	ldr	r3, [pc, #476]	@ (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	2380      	movs	r3, #128	@ 0x80
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4013      	ands	r3, r2
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001c6a:	4b73      	ldr	r3, [pc, #460]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	23c0      	movs	r3, #192	@ 0xc0
 8001c70:	039b      	lsls	r3, r3, #14
 8001c72:	4013      	ands	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	23c0      	movs	r3, #192	@ 0xc0
 8001c7c:	039b      	lsls	r3, r3, #14
 8001c7e:	4013      	ands	r3, r2
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d013      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	23c0      	movs	r3, #192	@ 0xc0
 8001c8c:	029b      	lsls	r3, r3, #10
 8001c8e:	401a      	ands	r2, r3
 8001c90:	23c0      	movs	r3, #192	@ 0xc0
 8001c92:	029b      	lsls	r3, r3, #10
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d10a      	bne.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001c98:	4b67      	ldr	r3, [pc, #412]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	@ 0x80
 8001c9e:	029b      	lsls	r3, r3, #10
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	2380      	movs	r3, #128	@ 0x80
 8001ca4:	029b      	lsls	r3, r3, #10
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d101      	bne.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0c0      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001cae:	4b62      	ldr	r3, [pc, #392]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cb2:	23c0      	movs	r3, #192	@ 0xc0
 8001cb4:	029b      	lsls	r3, r3, #10
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d03b      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	23c0      	movs	r3, #192	@ 0xc0
 8001cc6:	029b      	lsls	r3, r3, #10
 8001cc8:	4013      	ands	r3, r2
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d033      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d02e      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001cda:	4b57      	ldr	r3, [pc, #348]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cde:	4a58      	ldr	r2, [pc, #352]	@ (8001e40 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ce4:	4b54      	ldr	r3, [pc, #336]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ce6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ce8:	4b53      	ldr	r3, [pc, #332]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cea:	2180      	movs	r1, #128	@ 0x80
 8001cec:	0309      	lsls	r1, r1, #12
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cf2:	4b51      	ldr	r3, [pc, #324]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cf6:	4b50      	ldr	r3, [pc, #320]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001cf8:	4952      	ldr	r1, [pc, #328]	@ (8001e44 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001cfe:	4b4e      	ldr	r3, [pc, #312]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d014      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe ff69 	bl	8000be4 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d16:	e009      	b.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d18:	f7fe ff64 	bl	8000be4 <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	4a49      	ldr	r2, [pc, #292]	@ (8001e48 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e081      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d2c:	4b42      	ldr	r3, [pc, #264]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4013      	ands	r3, r2
 8001d36:	d0ef      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d01f      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	23c0      	movs	r3, #192	@ 0xc0
 8001d48:	029b      	lsls	r3, r3, #10
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	23c0      	movs	r3, #192	@ 0xc0
 8001d4e:	029b      	lsls	r3, r3, #10
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d10c      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001d54:	4b38      	ldr	r3, [pc, #224]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a3c      	ldr	r2, [pc, #240]	@ (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	23c0      	movs	r3, #192	@ 0xc0
 8001d64:	039b      	lsls	r3, r3, #14
 8001d66:	401a      	ands	r2, r3
 8001d68:	4b33      	ldr	r3, [pc, #204]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	4b32      	ldr	r3, [pc, #200]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	23c0      	movs	r3, #192	@ 0xc0
 8001d78:	029b      	lsls	r3, r3, #10
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d82:	2317      	movs	r3, #23
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d90:	4b29      	ldr	r3, [pc, #164]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001d92:	492f      	ldr	r1, [pc, #188]	@ (8001e50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d94:	400a      	ands	r2, r1
 8001d96:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d009      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001da2:	4b25      	ldr	r3, [pc, #148]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	2203      	movs	r2, #3
 8001da8:	4393      	bics	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	4b21      	ldr	r3, [pc, #132]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d009      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc4:	220c      	movs	r2, #12
 8001dc6:	4393      	bics	r3, r2
 8001dc8:	0019      	movs	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2204      	movs	r2, #4
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d009      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001dde:	4b16      	ldr	r3, [pc, #88]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	4b12      	ldr	r3, [pc, #72]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dee:	430a      	orrs	r2, r1
 8001df0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2208      	movs	r2, #8
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e00:	4a15      	ldr	r2, [pc, #84]	@ (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	0019      	movs	r1, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2280      	movs	r2, #128	@ 0x80
 8001e16:	4013      	ands	r3, r2
 8001e18:	d009      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699a      	ldr	r2, [r3, #24]
 8001e28:	4b03      	ldr	r3, [pc, #12]	@ (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b006      	add	sp, #24
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40007000 	.word	0x40007000
 8001e40:	fffcffff 	.word	0xfffcffff
 8001e44:	fff7ffff 	.word	0xfff7ffff
 8001e48:	00001388 	.word	0x00001388
 8001e4c:	ffcfffff 	.word	0xffcfffff
 8001e50:	efffffff 	.word	0xefffffff
 8001e54:	fffff3ff 	.word	0xfffff3ff
 8001e58:	ffffcfff 	.word	0xffffcfff
 8001e5c:	fff3ffff 	.word	0xfff3ffff

08001e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e044      	b.n	8001efc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d107      	bne.n	8001e8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2278      	movs	r2, #120	@ 0x78
 8001e7e:	2100      	movs	r1, #0
 8001e80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7fe fd4f 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2224      	movs	r2, #36	@ 0x24
 8001e8e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f000 f9b6 	bl	8002214 <UART_SetConfig>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e024      	b.n	8001efc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f000 fc2d 	bl	800271c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	490d      	ldr	r1, [pc, #52]	@ (8001f04 <HAL_UART_Init+0xa4>)
 8001ece:	400a      	ands	r2, r1
 8001ed0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	212a      	movs	r1, #42	@ 0x2a
 8001ede:	438a      	bics	r2, r1
 8001ee0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f000 fcc5 	bl	8002884 <UART_CheckIdleState>
 8001efa:	0003      	movs	r3, r0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	ffffb7ff 	.word	0xffffb7ff

08001f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	1dbb      	adds	r3, r7, #6
 8001f16:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001f1c:	2b20      	cmp	r3, #32
 8001f1e:	d000      	beq.n	8001f22 <HAL_UART_Transmit+0x1a>
 8001f20:	e08c      	b.n	800203c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_UART_Transmit+0x28>
 8001f28:	1dbb      	adds	r3, r7, #6
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e084      	b.n	800203e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	015b      	lsls	r3, r3, #5
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d109      	bne.n	8001f54 <HAL_UART_Transmit+0x4c>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d001      	beq.n	8001f54 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e074      	b.n	800203e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2284      	movs	r2, #132	@ 0x84
 8001f58:	2100      	movs	r1, #0
 8001f5a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2221      	movs	r2, #33	@ 0x21
 8001f60:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f62:	f7fe fe3f 	bl	8000be4 <HAL_GetTick>
 8001f66:	0003      	movs	r3, r0
 8001f68:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1dba      	adds	r2, r7, #6
 8001f6e:	2150      	movs	r1, #80	@ 0x50
 8001f70:	8812      	ldrh	r2, [r2, #0]
 8001f72:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1dba      	adds	r2, r7, #6
 8001f78:	2152      	movs	r1, #82	@ 0x52
 8001f7a:	8812      	ldrh	r2, [r2, #0]
 8001f7c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	2380      	movs	r3, #128	@ 0x80
 8001f84:	015b      	lsls	r3, r3, #5
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d108      	bne.n	8001f9c <HAL_UART_Transmit+0x94>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d104      	bne.n	8001f9c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	e003      	b.n	8001fa4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fa4:	e02f      	b.n	8002006 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	0013      	movs	r3, r2
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2180      	movs	r1, #128	@ 0x80
 8001fb4:	f000 fd0e 	bl	80029d4 <UART_WaitOnFlagUntilTimeout>
 8001fb8:	1e03      	subs	r3, r0, #0
 8001fba:	d004      	beq.n	8001fc6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2220      	movs	r2, #32
 8001fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e03b      	b.n	800203e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	001a      	movs	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	05d2      	lsls	r2, r2, #23
 8001fd8:	0dd2      	lsrs	r2, r2, #23
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	3302      	adds	r3, #2
 8001fe0:	61bb      	str	r3, [r7, #24]
 8001fe2:	e007      	b.n	8001ff4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2252      	movs	r2, #82	@ 0x52
 8001ff8:	5a9b      	ldrh	r3, [r3, r2]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	b299      	uxth	r1, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2252      	movs	r2, #82	@ 0x52
 8002004:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2252      	movs	r2, #82	@ 0x52
 800200a:	5a9b      	ldrh	r3, [r3, r2]
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1c9      	bne.n	8001fa6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	0013      	movs	r3, r2
 800201c:	2200      	movs	r2, #0
 800201e:	2140      	movs	r1, #64	@ 0x40
 8002020:	f000 fcd8 	bl	80029d4 <UART_WaitOnFlagUntilTimeout>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d004      	beq.n	8002032 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e005      	b.n	800203e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	e000      	b.n	800203e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800203c:	2302      	movs	r3, #2
  }
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b008      	add	sp, #32
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	@ 0x28
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	1dbb      	adds	r3, r7, #6
 8002056:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2280      	movs	r2, #128	@ 0x80
 800205c:	589b      	ldr	r3, [r3, r2]
 800205e:	2b20      	cmp	r3, #32
 8002060:	d000      	beq.n	8002064 <HAL_UART_Receive+0x1c>
 8002062:	e0d0      	b.n	8002206 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_UART_Receive+0x2a>
 800206a:	1dbb      	adds	r3, r7, #6
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0c8      	b.n	8002208 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	015b      	lsls	r3, r3, #5
 800207e:	429a      	cmp	r2, r3
 8002080:	d109      	bne.n	8002096 <HAL_UART_Receive+0x4e>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d105      	bne.n	8002096 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2201      	movs	r2, #1
 800208e:	4013      	ands	r3, r2
 8002090:	d001      	beq.n	8002096 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0b8      	b.n	8002208 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2284      	movs	r2, #132	@ 0x84
 800209a:	2100      	movs	r1, #0
 800209c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2280      	movs	r2, #128	@ 0x80
 80020a2:	2122      	movs	r1, #34	@ 0x22
 80020a4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ac:	f7fe fd9a 	bl	8000be4 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1dba      	adds	r2, r7, #6
 80020b8:	2158      	movs	r1, #88	@ 0x58
 80020ba:	8812      	ldrh	r2, [r2, #0]
 80020bc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1dba      	adds	r2, r7, #6
 80020c2:	215a      	movs	r1, #90	@ 0x5a
 80020c4:	8812      	ldrh	r2, [r2, #0]
 80020c6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	015b      	lsls	r3, r3, #5
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10d      	bne.n	80020f0 <HAL_UART_Receive+0xa8>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d104      	bne.n	80020e6 <HAL_UART_Receive+0x9e>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	225c      	movs	r2, #92	@ 0x5c
 80020e0:	494b      	ldr	r1, [pc, #300]	@ (8002210 <HAL_UART_Receive+0x1c8>)
 80020e2:	5299      	strh	r1, [r3, r2]
 80020e4:	e02e      	b.n	8002144 <HAL_UART_Receive+0xfc>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	225c      	movs	r2, #92	@ 0x5c
 80020ea:	21ff      	movs	r1, #255	@ 0xff
 80020ec:	5299      	strh	r1, [r3, r2]
 80020ee:	e029      	b.n	8002144 <HAL_UART_Receive+0xfc>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10d      	bne.n	8002114 <HAL_UART_Receive+0xcc>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d104      	bne.n	800210a <HAL_UART_Receive+0xc2>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	225c      	movs	r2, #92	@ 0x5c
 8002104:	21ff      	movs	r1, #255	@ 0xff
 8002106:	5299      	strh	r1, [r3, r2]
 8002108:	e01c      	b.n	8002144 <HAL_UART_Receive+0xfc>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	225c      	movs	r2, #92	@ 0x5c
 800210e:	217f      	movs	r1, #127	@ 0x7f
 8002110:	5299      	strh	r1, [r3, r2]
 8002112:	e017      	b.n	8002144 <HAL_UART_Receive+0xfc>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	055b      	lsls	r3, r3, #21
 800211c:	429a      	cmp	r2, r3
 800211e:	d10d      	bne.n	800213c <HAL_UART_Receive+0xf4>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d104      	bne.n	8002132 <HAL_UART_Receive+0xea>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	225c      	movs	r2, #92	@ 0x5c
 800212c:	217f      	movs	r1, #127	@ 0x7f
 800212e:	5299      	strh	r1, [r3, r2]
 8002130:	e008      	b.n	8002144 <HAL_UART_Receive+0xfc>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	225c      	movs	r2, #92	@ 0x5c
 8002136:	213f      	movs	r1, #63	@ 0x3f
 8002138:	5299      	strh	r1, [r3, r2]
 800213a:	e003      	b.n	8002144 <HAL_UART_Receive+0xfc>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	225c      	movs	r2, #92	@ 0x5c
 8002140:	2100      	movs	r1, #0
 8002142:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002144:	2312      	movs	r3, #18
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	215c      	movs	r1, #92	@ 0x5c
 800214c:	5a52      	ldrh	r2, [r2, r1]
 800214e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	2380      	movs	r3, #128	@ 0x80
 8002156:	015b      	lsls	r3, r3, #5
 8002158:	429a      	cmp	r2, r3
 800215a:	d108      	bne.n	800216e <HAL_UART_Receive+0x126>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d104      	bne.n	800216e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	e003      	b.n	8002176 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002176:	e03a      	b.n	80021ee <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	0013      	movs	r3, r2
 8002182:	2200      	movs	r2, #0
 8002184:	2120      	movs	r1, #32
 8002186:	f000 fc25 	bl	80029d4 <UART_WaitOnFlagUntilTimeout>
 800218a:	1e03      	subs	r3, r0, #0
 800218c:	d005      	beq.n	800219a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2280      	movs	r2, #128	@ 0x80
 8002192:	2120      	movs	r1, #32
 8002194:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e036      	b.n	8002208 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10e      	bne.n	80021be <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	2212      	movs	r2, #18
 80021aa:	18ba      	adds	r2, r7, r2
 80021ac:	8812      	ldrh	r2, [r2, #0]
 80021ae:	4013      	ands	r3, r2
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	3302      	adds	r3, #2
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	e00e      	b.n	80021dc <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2212      	movs	r2, #18
 80021c8:	18ba      	adds	r2, r7, r2
 80021ca:	8812      	ldrh	r2, [r2, #0]
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	4013      	ands	r3, r2
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3301      	adds	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	225a      	movs	r2, #90	@ 0x5a
 80021e0:	5a9b      	ldrh	r3, [r3, r2]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b299      	uxth	r1, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	225a      	movs	r2, #90	@ 0x5a
 80021ec:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	225a      	movs	r2, #90	@ 0x5a
 80021f2:	5a9b      	ldrh	r3, [r3, r2]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1be      	bne.n	8002178 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2280      	movs	r2, #128	@ 0x80
 80021fe:	2120      	movs	r1, #32
 8002200:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e000      	b.n	8002208 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002206:	2302      	movs	r3, #2
  }
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b008      	add	sp, #32
 800220e:	bd80      	pop	{r7, pc}
 8002210:	000001ff 	.word	0x000001ff

08002214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002214:	b5b0      	push	{r4, r5, r7, lr}
 8002216:	b08e      	sub	sp, #56	@ 0x38
 8002218:	af00      	add	r7, sp, #0
 800221a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800221c:	231a      	movs	r3, #26
 800221e:	2218      	movs	r2, #24
 8002220:	189b      	adds	r3, r3, r2
 8002222:	19db      	adds	r3, r3, r7
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	431a      	orrs	r2, r3
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	431a      	orrs	r2, r3
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	4313      	orrs	r3, r2
 800223e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4ac6      	ldr	r2, [pc, #792]	@ (8002560 <UART_SetConfig+0x34c>)
 8002248:	4013      	ands	r3, r2
 800224a:	0019      	movs	r1, r3
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4ac1      	ldr	r2, [pc, #772]	@ (8002564 <UART_SetConfig+0x350>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4abb      	ldr	r2, [pc, #748]	@ (8002568 <UART_SetConfig+0x354>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d004      	beq.n	8002288 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002284:	4313      	orrs	r3, r2
 8002286:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	4ab7      	ldr	r2, [pc, #732]	@ (800256c <UART_SetConfig+0x358>)
 8002290:	4013      	ands	r3, r2
 8002292:	0019      	movs	r1, r3
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800229a:	430a      	orrs	r2, r1
 800229c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4ab3      	ldr	r2, [pc, #716]	@ (8002570 <UART_SetConfig+0x35c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d131      	bne.n	800230c <UART_SetConfig+0xf8>
 80022a8:	4bb2      	ldr	r3, [pc, #712]	@ (8002574 <UART_SetConfig+0x360>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ac:	2203      	movs	r2, #3
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d01d      	beq.n	80022f0 <UART_SetConfig+0xdc>
 80022b4:	d823      	bhi.n	80022fe <UART_SetConfig+0xea>
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d00c      	beq.n	80022d4 <UART_SetConfig+0xc0>
 80022ba:	d820      	bhi.n	80022fe <UART_SetConfig+0xea>
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <UART_SetConfig+0xb2>
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d00e      	beq.n	80022e2 <UART_SetConfig+0xce>
 80022c4:	e01b      	b.n	80022fe <UART_SetConfig+0xea>
 80022c6:	231b      	movs	r3, #27
 80022c8:	2218      	movs	r2, #24
 80022ca:	189b      	adds	r3, r3, r2
 80022cc:	19db      	adds	r3, r3, r7
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e09c      	b.n	800240e <UART_SetConfig+0x1fa>
 80022d4:	231b      	movs	r3, #27
 80022d6:	2218      	movs	r2, #24
 80022d8:	189b      	adds	r3, r3, r2
 80022da:	19db      	adds	r3, r3, r7
 80022dc:	2202      	movs	r2, #2
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	e095      	b.n	800240e <UART_SetConfig+0x1fa>
 80022e2:	231b      	movs	r3, #27
 80022e4:	2218      	movs	r2, #24
 80022e6:	189b      	adds	r3, r3, r2
 80022e8:	19db      	adds	r3, r3, r7
 80022ea:	2204      	movs	r2, #4
 80022ec:	701a      	strb	r2, [r3, #0]
 80022ee:	e08e      	b.n	800240e <UART_SetConfig+0x1fa>
 80022f0:	231b      	movs	r3, #27
 80022f2:	2218      	movs	r2, #24
 80022f4:	189b      	adds	r3, r3, r2
 80022f6:	19db      	adds	r3, r3, r7
 80022f8:	2208      	movs	r2, #8
 80022fa:	701a      	strb	r2, [r3, #0]
 80022fc:	e087      	b.n	800240e <UART_SetConfig+0x1fa>
 80022fe:	231b      	movs	r3, #27
 8002300:	2218      	movs	r2, #24
 8002302:	189b      	adds	r3, r3, r2
 8002304:	19db      	adds	r3, r3, r7
 8002306:	2210      	movs	r2, #16
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e080      	b.n	800240e <UART_SetConfig+0x1fa>
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a99      	ldr	r2, [pc, #612]	@ (8002578 <UART_SetConfig+0x364>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d131      	bne.n	800237a <UART_SetConfig+0x166>
 8002316:	4b97      	ldr	r3, [pc, #604]	@ (8002574 <UART_SetConfig+0x360>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231a:	220c      	movs	r2, #12
 800231c:	4013      	ands	r3, r2
 800231e:	2b0c      	cmp	r3, #12
 8002320:	d01d      	beq.n	800235e <UART_SetConfig+0x14a>
 8002322:	d823      	bhi.n	800236c <UART_SetConfig+0x158>
 8002324:	2b08      	cmp	r3, #8
 8002326:	d00c      	beq.n	8002342 <UART_SetConfig+0x12e>
 8002328:	d820      	bhi.n	800236c <UART_SetConfig+0x158>
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <UART_SetConfig+0x120>
 800232e:	2b04      	cmp	r3, #4
 8002330:	d00e      	beq.n	8002350 <UART_SetConfig+0x13c>
 8002332:	e01b      	b.n	800236c <UART_SetConfig+0x158>
 8002334:	231b      	movs	r3, #27
 8002336:	2218      	movs	r2, #24
 8002338:	189b      	adds	r3, r3, r2
 800233a:	19db      	adds	r3, r3, r7
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e065      	b.n	800240e <UART_SetConfig+0x1fa>
 8002342:	231b      	movs	r3, #27
 8002344:	2218      	movs	r2, #24
 8002346:	189b      	adds	r3, r3, r2
 8002348:	19db      	adds	r3, r3, r7
 800234a:	2202      	movs	r2, #2
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e05e      	b.n	800240e <UART_SetConfig+0x1fa>
 8002350:	231b      	movs	r3, #27
 8002352:	2218      	movs	r2, #24
 8002354:	189b      	adds	r3, r3, r2
 8002356:	19db      	adds	r3, r3, r7
 8002358:	2204      	movs	r2, #4
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	e057      	b.n	800240e <UART_SetConfig+0x1fa>
 800235e:	231b      	movs	r3, #27
 8002360:	2218      	movs	r2, #24
 8002362:	189b      	adds	r3, r3, r2
 8002364:	19db      	adds	r3, r3, r7
 8002366:	2208      	movs	r2, #8
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e050      	b.n	800240e <UART_SetConfig+0x1fa>
 800236c:	231b      	movs	r3, #27
 800236e:	2218      	movs	r2, #24
 8002370:	189b      	adds	r3, r3, r2
 8002372:	19db      	adds	r3, r3, r7
 8002374:	2210      	movs	r2, #16
 8002376:	701a      	strb	r2, [r3, #0]
 8002378:	e049      	b.n	800240e <UART_SetConfig+0x1fa>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a7a      	ldr	r2, [pc, #488]	@ (8002568 <UART_SetConfig+0x354>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d13e      	bne.n	8002402 <UART_SetConfig+0x1ee>
 8002384:	4b7b      	ldr	r3, [pc, #492]	@ (8002574 <UART_SetConfig+0x360>)
 8002386:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002388:	23c0      	movs	r3, #192	@ 0xc0
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	4013      	ands	r3, r2
 800238e:	22c0      	movs	r2, #192	@ 0xc0
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	4293      	cmp	r3, r2
 8002394:	d027      	beq.n	80023e6 <UART_SetConfig+0x1d2>
 8002396:	22c0      	movs	r2, #192	@ 0xc0
 8002398:	0112      	lsls	r2, r2, #4
 800239a:	4293      	cmp	r3, r2
 800239c:	d82a      	bhi.n	80023f4 <UART_SetConfig+0x1e0>
 800239e:	2280      	movs	r2, #128	@ 0x80
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d011      	beq.n	80023ca <UART_SetConfig+0x1b6>
 80023a6:	2280      	movs	r2, #128	@ 0x80
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d822      	bhi.n	80023f4 <UART_SetConfig+0x1e0>
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <UART_SetConfig+0x1a8>
 80023b2:	2280      	movs	r2, #128	@ 0x80
 80023b4:	00d2      	lsls	r2, r2, #3
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00e      	beq.n	80023d8 <UART_SetConfig+0x1c4>
 80023ba:	e01b      	b.n	80023f4 <UART_SetConfig+0x1e0>
 80023bc:	231b      	movs	r3, #27
 80023be:	2218      	movs	r2, #24
 80023c0:	189b      	adds	r3, r3, r2
 80023c2:	19db      	adds	r3, r3, r7
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e021      	b.n	800240e <UART_SetConfig+0x1fa>
 80023ca:	231b      	movs	r3, #27
 80023cc:	2218      	movs	r2, #24
 80023ce:	189b      	adds	r3, r3, r2
 80023d0:	19db      	adds	r3, r3, r7
 80023d2:	2202      	movs	r2, #2
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e01a      	b.n	800240e <UART_SetConfig+0x1fa>
 80023d8:	231b      	movs	r3, #27
 80023da:	2218      	movs	r2, #24
 80023dc:	189b      	adds	r3, r3, r2
 80023de:	19db      	adds	r3, r3, r7
 80023e0:	2204      	movs	r2, #4
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e013      	b.n	800240e <UART_SetConfig+0x1fa>
 80023e6:	231b      	movs	r3, #27
 80023e8:	2218      	movs	r2, #24
 80023ea:	189b      	adds	r3, r3, r2
 80023ec:	19db      	adds	r3, r3, r7
 80023ee:	2208      	movs	r2, #8
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	e00c      	b.n	800240e <UART_SetConfig+0x1fa>
 80023f4:	231b      	movs	r3, #27
 80023f6:	2218      	movs	r2, #24
 80023f8:	189b      	adds	r3, r3, r2
 80023fa:	19db      	adds	r3, r3, r7
 80023fc:	2210      	movs	r2, #16
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	e005      	b.n	800240e <UART_SetConfig+0x1fa>
 8002402:	231b      	movs	r3, #27
 8002404:	2218      	movs	r2, #24
 8002406:	189b      	adds	r3, r3, r2
 8002408:	19db      	adds	r3, r3, r7
 800240a:	2210      	movs	r2, #16
 800240c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a55      	ldr	r2, [pc, #340]	@ (8002568 <UART_SetConfig+0x354>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d000      	beq.n	800241a <UART_SetConfig+0x206>
 8002418:	e084      	b.n	8002524 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800241a:	231b      	movs	r3, #27
 800241c:	2218      	movs	r2, #24
 800241e:	189b      	adds	r3, r3, r2
 8002420:	19db      	adds	r3, r3, r7
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d01d      	beq.n	8002464 <UART_SetConfig+0x250>
 8002428:	dc20      	bgt.n	800246c <UART_SetConfig+0x258>
 800242a:	2b04      	cmp	r3, #4
 800242c:	d015      	beq.n	800245a <UART_SetConfig+0x246>
 800242e:	dc1d      	bgt.n	800246c <UART_SetConfig+0x258>
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <UART_SetConfig+0x226>
 8002434:	2b02      	cmp	r3, #2
 8002436:	d005      	beq.n	8002444 <UART_SetConfig+0x230>
 8002438:	e018      	b.n	800246c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800243a:	f7ff fbab 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 800243e:	0003      	movs	r3, r0
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002442:	e01c      	b.n	800247e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002444:	4b4b      	ldr	r3, [pc, #300]	@ (8002574 <UART_SetConfig+0x360>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2210      	movs	r2, #16
 800244a:	4013      	ands	r3, r2
 800244c:	d002      	beq.n	8002454 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800244e:	4b4b      	ldr	r3, [pc, #300]	@ (800257c <UART_SetConfig+0x368>)
 8002450:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002452:	e014      	b.n	800247e <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002454:	4b4a      	ldr	r3, [pc, #296]	@ (8002580 <UART_SetConfig+0x36c>)
 8002456:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002458:	e011      	b.n	800247e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800245a:	f7ff faeb 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 800245e:	0003      	movs	r3, r0
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002462:	e00c      	b.n	800247e <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002464:	2380      	movs	r3, #128	@ 0x80
 8002466:	021b      	lsls	r3, r3, #8
 8002468:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800246a:	e008      	b.n	800247e <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002470:	231a      	movs	r3, #26
 8002472:	2218      	movs	r2, #24
 8002474:	189b      	adds	r3, r3, r2
 8002476:	19db      	adds	r3, r3, r7
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
        break;
 800247c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800247e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d100      	bne.n	8002486 <UART_SetConfig+0x272>
 8002484:	e132      	b.n	80026ec <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	0013      	movs	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	189b      	adds	r3, r3, r2
 8002490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002492:	429a      	cmp	r2, r3
 8002494:	d305      	bcc.n	80024a2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800249c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800249e:	429a      	cmp	r2, r3
 80024a0:	d906      	bls.n	80024b0 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80024a2:	231a      	movs	r3, #26
 80024a4:	2218      	movs	r2, #24
 80024a6:	189b      	adds	r3, r3, r2
 80024a8:	19db      	adds	r3, r3, r7
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e11d      	b.n	80026ec <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80024b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	6939      	ldr	r1, [r7, #16]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	000b      	movs	r3, r1
 80024be:	0e1b      	lsrs	r3, r3, #24
 80024c0:	0010      	movs	r0, r2
 80024c2:	0205      	lsls	r5, r0, #8
 80024c4:	431d      	orrs	r5, r3
 80024c6:	000b      	movs	r3, r1
 80024c8:	021c      	lsls	r4, r3, #8
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	085b      	lsrs	r3, r3, #1
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68b8      	ldr	r0, [r7, #8]
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	1900      	adds	r0, r0, r4
 80024dc:	4169      	adcs	r1, r5
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	2300      	movs	r3, #0
 80024e6:	607b      	str	r3, [r7, #4]
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f7fd feaa 	bl	8000244 <__aeabi_uldivmod>
 80024f0:	0002      	movs	r2, r0
 80024f2:	000b      	movs	r3, r1
 80024f4:	0013      	movs	r3, r2
 80024f6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80024f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024fa:	23c0      	movs	r3, #192	@ 0xc0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	429a      	cmp	r2, r3
 8002500:	d309      	bcc.n	8002516 <UART_SetConfig+0x302>
 8002502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	035b      	lsls	r3, r3, #13
 8002508:	429a      	cmp	r2, r3
 800250a:	d204      	bcs.n	8002516 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002512:	60da      	str	r2, [r3, #12]
 8002514:	e0ea      	b.n	80026ec <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002516:	231a      	movs	r3, #26
 8002518:	2218      	movs	r2, #24
 800251a:	189b      	adds	r3, r3, r2
 800251c:	19db      	adds	r3, r3, r7
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e0e3      	b.n	80026ec <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	2380      	movs	r3, #128	@ 0x80
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	429a      	cmp	r2, r3
 800252e:	d000      	beq.n	8002532 <UART_SetConfig+0x31e>
 8002530:	e085      	b.n	800263e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002532:	231b      	movs	r3, #27
 8002534:	2218      	movs	r2, #24
 8002536:	189b      	adds	r3, r3, r2
 8002538:	19db      	adds	r3, r3, r7
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b08      	cmp	r3, #8
 800253e:	d837      	bhi.n	80025b0 <UART_SetConfig+0x39c>
 8002540:	009a      	lsls	r2, r3, #2
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <UART_SetConfig+0x370>)
 8002544:	18d3      	adds	r3, r2, r3
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800254a:	f7ff fb23 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 800254e:	0003      	movs	r3, r0
 8002550:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002552:	e036      	b.n	80025c2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002554:	f7ff fb34 	bl	8001bc0 <HAL_RCC_GetPCLK2Freq>
 8002558:	0003      	movs	r3, r0
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800255c:	e031      	b.n	80025c2 <UART_SetConfig+0x3ae>
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	efff69f3 	.word	0xefff69f3
 8002564:	ffffcfff 	.word	0xffffcfff
 8002568:	40004800 	.word	0x40004800
 800256c:	fffff4ff 	.word	0xfffff4ff
 8002570:	40013800 	.word	0x40013800
 8002574:	40021000 	.word	0x40021000
 8002578:	40004400 	.word	0x40004400
 800257c:	003d0900 	.word	0x003d0900
 8002580:	00f42400 	.word	0x00f42400
 8002584:	08003504 	.word	0x08003504
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002588:	4b60      	ldr	r3, [pc, #384]	@ (800270c <UART_SetConfig+0x4f8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2210      	movs	r2, #16
 800258e:	4013      	ands	r3, r2
 8002590:	d002      	beq.n	8002598 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002592:	4b5f      	ldr	r3, [pc, #380]	@ (8002710 <UART_SetConfig+0x4fc>)
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002596:	e014      	b.n	80025c2 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002598:	4b5e      	ldr	r3, [pc, #376]	@ (8002714 <UART_SetConfig+0x500>)
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800259c:	e011      	b.n	80025c2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800259e:	f7ff fa49 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80025a2:	0003      	movs	r3, r0
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80025a6:	e00c      	b.n	80025c2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025a8:	2380      	movs	r3, #128	@ 0x80
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80025ae:	e008      	b.n	80025c2 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80025b4:	231a      	movs	r3, #26
 80025b6:	2218      	movs	r2, #24
 80025b8:	189b      	adds	r3, r3, r2
 80025ba:	19db      	adds	r3, r3, r7
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
        break;
 80025c0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d100      	bne.n	80025ca <UART_SetConfig+0x3b6>
 80025c8:	e090      	b.n	80026ec <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025cc:	005a      	lsls	r2, r3, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	085b      	lsrs	r3, r3, #1
 80025d4:	18d2      	adds	r2, r2, r3
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0019      	movs	r1, r3
 80025dc:	0010      	movs	r0, r2
 80025de:	f7fd fda5 	bl	800012c <__udivsi3>
 80025e2:	0003      	movs	r3, r0
 80025e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e8:	2b0f      	cmp	r3, #15
 80025ea:	d921      	bls.n	8002630 <UART_SetConfig+0x41c>
 80025ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025ee:	2380      	movs	r3, #128	@ 0x80
 80025f0:	025b      	lsls	r3, r3, #9
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d21c      	bcs.n	8002630 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	200e      	movs	r0, #14
 80025fc:	2418      	movs	r4, #24
 80025fe:	1903      	adds	r3, r0, r4
 8002600:	19db      	adds	r3, r3, r7
 8002602:	210f      	movs	r1, #15
 8002604:	438a      	bics	r2, r1
 8002606:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	b29b      	uxth	r3, r3
 800260e:	2207      	movs	r2, #7
 8002610:	4013      	ands	r3, r2
 8002612:	b299      	uxth	r1, r3
 8002614:	1903      	adds	r3, r0, r4
 8002616:	19db      	adds	r3, r3, r7
 8002618:	1902      	adds	r2, r0, r4
 800261a:	19d2      	adds	r2, r2, r7
 800261c:	8812      	ldrh	r2, [r2, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	1902      	adds	r2, r0, r4
 8002628:	19d2      	adds	r2, r2, r7
 800262a:	8812      	ldrh	r2, [r2, #0]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	e05d      	b.n	80026ec <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002630:	231a      	movs	r3, #26
 8002632:	2218      	movs	r2, #24
 8002634:	189b      	adds	r3, r3, r2
 8002636:	19db      	adds	r3, r3, r7
 8002638:	2201      	movs	r2, #1
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e056      	b.n	80026ec <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800263e:	231b      	movs	r3, #27
 8002640:	2218      	movs	r2, #24
 8002642:	189b      	adds	r3, r3, r2
 8002644:	19db      	adds	r3, r3, r7
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b08      	cmp	r3, #8
 800264a:	d822      	bhi.n	8002692 <UART_SetConfig+0x47e>
 800264c:	009a      	lsls	r2, r3, #2
 800264e:	4b32      	ldr	r3, [pc, #200]	@ (8002718 <UART_SetConfig+0x504>)
 8002650:	18d3      	adds	r3, r2, r3
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002656:	f7ff fa9d 	bl	8001b94 <HAL_RCC_GetPCLK1Freq>
 800265a:	0003      	movs	r3, r0
 800265c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800265e:	e021      	b.n	80026a4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002660:	f7ff faae 	bl	8001bc0 <HAL_RCC_GetPCLK2Freq>
 8002664:	0003      	movs	r3, r0
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002668:	e01c      	b.n	80026a4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800266a:	4b28      	ldr	r3, [pc, #160]	@ (800270c <UART_SetConfig+0x4f8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2210      	movs	r2, #16
 8002670:	4013      	ands	r3, r2
 8002672:	d002      	beq.n	800267a <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002674:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <UART_SetConfig+0x4fc>)
 8002676:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002678:	e014      	b.n	80026a4 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 800267a:	4b26      	ldr	r3, [pc, #152]	@ (8002714 <UART_SetConfig+0x500>)
 800267c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800267e:	e011      	b.n	80026a4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002680:	f7ff f9d8 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 8002684:	0003      	movs	r3, r0
 8002686:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002688:	e00c      	b.n	80026a4 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	021b      	lsls	r3, r3, #8
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002690:	e008      	b.n	80026a4 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002696:	231a      	movs	r3, #26
 8002698:	2218      	movs	r2, #24
 800269a:	189b      	adds	r3, r3, r2
 800269c:	19db      	adds	r3, r3, r7
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
        break;
 80026a2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80026a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d020      	beq.n	80026ec <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	085a      	lsrs	r2, r3, #1
 80026b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b2:	18d2      	adds	r2, r2, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	0019      	movs	r1, r3
 80026ba:	0010      	movs	r0, r2
 80026bc:	f7fd fd36 	bl	800012c <__udivsi3>
 80026c0:	0003      	movs	r3, r0
 80026c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c6:	2b0f      	cmp	r3, #15
 80026c8:	d90a      	bls.n	80026e0 <UART_SetConfig+0x4cc>
 80026ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026cc:	2380      	movs	r3, #128	@ 0x80
 80026ce:	025b      	lsls	r3, r3, #9
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d205      	bcs.n	80026e0 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	e005      	b.n	80026ec <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80026e0:	231a      	movs	r3, #26
 80026e2:	2218      	movs	r2, #24
 80026e4:	189b      	adds	r3, r3, r2
 80026e6:	19db      	adds	r3, r3, r7
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	2200      	movs	r2, #0
 80026f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	2200      	movs	r2, #0
 80026f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80026f8:	231a      	movs	r3, #26
 80026fa:	2218      	movs	r2, #24
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	19db      	adds	r3, r3, r7
 8002700:	781b      	ldrb	r3, [r3, #0]
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b00e      	add	sp, #56	@ 0x38
 8002708:	bdb0      	pop	{r4, r5, r7, pc}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	40021000 	.word	0x40021000
 8002710:	003d0900 	.word	0x003d0900
 8002714:	00f42400 	.word	0x00f42400
 8002718:	08003528 	.word	0x08003528

0800271c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	2201      	movs	r2, #1
 800272a:	4013      	ands	r3, r2
 800272c:	d00b      	beq.n	8002746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a4a      	ldr	r2, [pc, #296]	@ (8002860 <UART_AdvFeatureConfig+0x144>)
 8002736:	4013      	ands	r3, r2
 8002738:	0019      	movs	r1, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	2202      	movs	r2, #2
 800274c:	4013      	ands	r3, r2
 800274e:	d00b      	beq.n	8002768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4a43      	ldr	r2, [pc, #268]	@ (8002864 <UART_AdvFeatureConfig+0x148>)
 8002758:	4013      	ands	r3, r2
 800275a:	0019      	movs	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276c:	2204      	movs	r2, #4
 800276e:	4013      	ands	r3, r2
 8002770:	d00b      	beq.n	800278a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a3b      	ldr	r2, [pc, #236]	@ (8002868 <UART_AdvFeatureConfig+0x14c>)
 800277a:	4013      	ands	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278e:	2208      	movs	r2, #8
 8002790:	4013      	ands	r3, r2
 8002792:	d00b      	beq.n	80027ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4a34      	ldr	r2, [pc, #208]	@ (800286c <UART_AdvFeatureConfig+0x150>)
 800279c:	4013      	ands	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	2210      	movs	r2, #16
 80027b2:	4013      	ands	r3, r2
 80027b4:	d00b      	beq.n	80027ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002870 <UART_AdvFeatureConfig+0x154>)
 80027be:	4013      	ands	r3, r2
 80027c0:	0019      	movs	r1, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	2220      	movs	r2, #32
 80027d4:	4013      	ands	r3, r2
 80027d6:	d00b      	beq.n	80027f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	4a25      	ldr	r2, [pc, #148]	@ (8002874 <UART_AdvFeatureConfig+0x158>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f4:	2240      	movs	r2, #64	@ 0x40
 80027f6:	4013      	ands	r3, r2
 80027f8:	d01d      	beq.n	8002836 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a1d      	ldr	r2, [pc, #116]	@ (8002878 <UART_AdvFeatureConfig+0x15c>)
 8002802:	4013      	ands	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002816:	2380      	movs	r3, #128	@ 0x80
 8002818:	035b      	lsls	r3, r3, #13
 800281a:	429a      	cmp	r2, r3
 800281c:	d10b      	bne.n	8002836 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a15      	ldr	r2, [pc, #84]	@ (800287c <UART_AdvFeatureConfig+0x160>)
 8002826:	4013      	ands	r3, r2
 8002828:	0019      	movs	r1, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	2280      	movs	r2, #128	@ 0x80
 800283c:	4013      	ands	r3, r2
 800283e:	d00b      	beq.n	8002858 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a0e      	ldr	r2, [pc, #56]	@ (8002880 <UART_AdvFeatureConfig+0x164>)
 8002848:	4013      	ands	r3, r2
 800284a:	0019      	movs	r1, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]
  }
}
 8002858:	46c0      	nop			@ (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b002      	add	sp, #8
 800285e:	bd80      	pop	{r7, pc}
 8002860:	fffdffff 	.word	0xfffdffff
 8002864:	fffeffff 	.word	0xfffeffff
 8002868:	fffbffff 	.word	0xfffbffff
 800286c:	ffff7fff 	.word	0xffff7fff
 8002870:	ffffefff 	.word	0xffffefff
 8002874:	ffffdfff 	.word	0xffffdfff
 8002878:	ffefffff 	.word	0xffefffff
 800287c:	ff9fffff 	.word	0xff9fffff
 8002880:	fff7ffff 	.word	0xfff7ffff

08002884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b092      	sub	sp, #72	@ 0x48
 8002888:	af02      	add	r7, sp, #8
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2284      	movs	r2, #132	@ 0x84
 8002890:	2100      	movs	r1, #0
 8002892:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002894:	f7fe f9a6 	bl	8000be4 <HAL_GetTick>
 8002898:	0003      	movs	r3, r0
 800289a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2208      	movs	r2, #8
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d12c      	bne.n	8002904 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ac:	2280      	movs	r2, #128	@ 0x80
 80028ae:	0391      	lsls	r1, r2, #14
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	4a46      	ldr	r2, [pc, #280]	@ (80029cc <UART_CheckIdleState+0x148>)
 80028b4:	9200      	str	r2, [sp, #0]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f000 f88c 	bl	80029d4 <UART_WaitOnFlagUntilTimeout>
 80028bc:	1e03      	subs	r3, r0, #0
 80028be:	d021      	beq.n	8002904 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028c0:	f3ef 8310 	mrs	r3, PRIMASK
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80028c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028ca:	2301      	movs	r3, #1
 80028cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d0:	f383 8810 	msr	PRIMASK, r3
}
 80028d4:	46c0      	nop			@ (mov r8, r8)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2180      	movs	r1, #128	@ 0x80
 80028e2:	438a      	bics	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ec:	f383 8810 	msr	PRIMASK, r3
}
 80028f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2278      	movs	r2, #120	@ 0x78
 80028fc:	2100      	movs	r1, #0
 80028fe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e05f      	b.n	80029c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2204      	movs	r2, #4
 800290c:	4013      	ands	r3, r2
 800290e:	2b04      	cmp	r3, #4
 8002910:	d146      	bne.n	80029a0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	03d1      	lsls	r1, r2, #15
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4a2c      	ldr	r2, [pc, #176]	@ (80029cc <UART_CheckIdleState+0x148>)
 800291c:	9200      	str	r2, [sp, #0]
 800291e:	2200      	movs	r2, #0
 8002920:	f000 f858 	bl	80029d4 <UART_WaitOnFlagUntilTimeout>
 8002924:	1e03      	subs	r3, r0, #0
 8002926:	d03b      	beq.n	80029a0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002928:	f3ef 8310 	mrs	r3, PRIMASK
 800292c:	60fb      	str	r3, [r7, #12]
  return(result);
 800292e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002930:	637b      	str	r3, [r7, #52]	@ 0x34
 8002932:	2301      	movs	r3, #1
 8002934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f383 8810 	msr	PRIMASK, r3
}
 800293c:	46c0      	nop			@ (mov r8, r8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4921      	ldr	r1, [pc, #132]	@ (80029d0 <UART_CheckIdleState+0x14c>)
 800294a:	400a      	ands	r2, r1
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002950:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f383 8810 	msr	PRIMASK, r3
}
 8002958:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800295a:	f3ef 8310 	mrs	r3, PRIMASK
 800295e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002960:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002962:	633b      	str	r3, [r7, #48]	@ 0x30
 8002964:	2301      	movs	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f383 8810 	msr	PRIMASK, r3
}
 800296e:	46c0      	nop			@ (mov r8, r8)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2101      	movs	r1, #1
 800297c:	438a      	bics	r2, r1
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002982:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f383 8810 	msr	PRIMASK, r3
}
 800298a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2280      	movs	r2, #128	@ 0x80
 8002990:	2120      	movs	r1, #32
 8002992:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2278      	movs	r2, #120	@ 0x78
 8002998:	2100      	movs	r1, #0
 800299a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e011      	b.n	80029c4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	2120      	movs	r1, #32
 80029ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2278      	movs	r2, #120	@ 0x78
 80029be:	2100      	movs	r1, #0
 80029c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b010      	add	sp, #64	@ 0x40
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	01ffffff 	.word	0x01ffffff
 80029d0:	fffffedf 	.word	0xfffffedf

080029d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	1dfb      	adds	r3, r7, #7
 80029e2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e4:	e04b      	b.n	8002a7e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	3301      	adds	r3, #1
 80029ea:	d048      	beq.n	8002a7e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ec:	f7fe f8fa 	bl	8000be4 <HAL_GetTick>
 80029f0:	0002      	movs	r2, r0
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d302      	bcc.n	8002a02 <UART_WaitOnFlagUntilTimeout+0x2e>
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e04b      	b.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d035      	beq.n	8002a7e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d111      	bne.n	8002a44 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2208      	movs	r2, #8
 8002a26:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 f83c 	bl	8002aa8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2284      	movs	r2, #132	@ 0x84
 8002a34:	2108      	movs	r1, #8
 8002a36:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2278      	movs	r2, #120	@ 0x78
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e02c      	b.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	401a      	ands	r2, r3
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d112      	bne.n	8002a7e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2280      	movs	r2, #128	@ 0x80
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 f81f 	bl	8002aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2284      	movs	r2, #132	@ 0x84
 8002a6e:	2120      	movs	r1, #32
 8002a70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2278      	movs	r2, #120	@ 0x78
 8002a76:	2100      	movs	r1, #0
 8002a78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e00f      	b.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	4013      	ands	r3, r2
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	425a      	negs	r2, r3
 8002a8e:	4153      	adcs	r3, r2
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	001a      	movs	r2, r3
 8002a94:	1dfb      	adds	r3, r7, #7
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d0a4      	beq.n	80029e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b004      	add	sp, #16
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08e      	sub	sp, #56	@ 0x38
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8002ab6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ab8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aba:	2301      	movs	r3, #1
 8002abc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f383 8810 	msr	PRIMASK, r3
}
 8002ac4:	46c0      	nop			@ (mov r8, r8)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4926      	ldr	r1, [pc, #152]	@ (8002b6c <UART_EndRxTransfer+0xc4>)
 8002ad2:	400a      	ands	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f383 8810 	msr	PRIMASK, r3
}
 8002ae0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae6:	623b      	str	r3, [r7, #32]
  return(result);
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aea:	633b      	str	r3, [r7, #48]	@ 0x30
 8002aec:	2301      	movs	r3, #1
 8002aee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	f383 8810 	msr	PRIMASK, r3
}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2101      	movs	r1, #1
 8002b04:	438a      	bics	r2, r1
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0e:	f383 8810 	msr	PRIMASK, r3
}
 8002b12:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d118      	bne.n	8002b4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b20:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b26:	2301      	movs	r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f383 8810 	msr	PRIMASK, r3
}
 8002b30:	46c0      	nop			@ (mov r8, r8)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2110      	movs	r1, #16
 8002b3e:	438a      	bics	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f383 8810 	msr	PRIMASK, r3
}
 8002b4c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2280      	movs	r2, #128	@ 0x80
 8002b52:	2120      	movs	r1, #32
 8002b54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b00e      	add	sp, #56	@ 0x38
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	fffffedf 	.word	0xfffffedf

08002b70 <siprintf>:
 8002b70:	b40e      	push	{r1, r2, r3}
 8002b72:	b500      	push	{lr}
 8002b74:	490b      	ldr	r1, [pc, #44]	@ (8002ba4 <siprintf+0x34>)
 8002b76:	b09c      	sub	sp, #112	@ 0x70
 8002b78:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b7a:	9002      	str	r0, [sp, #8]
 8002b7c:	9006      	str	r0, [sp, #24]
 8002b7e:	9107      	str	r1, [sp, #28]
 8002b80:	9104      	str	r1, [sp, #16]
 8002b82:	4809      	ldr	r0, [pc, #36]	@ (8002ba8 <siprintf+0x38>)
 8002b84:	4909      	ldr	r1, [pc, #36]	@ (8002bac <siprintf+0x3c>)
 8002b86:	cb04      	ldmia	r3!, {r2}
 8002b88:	9105      	str	r1, [sp, #20]
 8002b8a:	6800      	ldr	r0, [r0, #0]
 8002b8c:	a902      	add	r1, sp, #8
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	f000 f99e 	bl	8002ed0 <_svfiprintf_r>
 8002b94:	2200      	movs	r2, #0
 8002b96:	9b02      	ldr	r3, [sp, #8]
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	b01c      	add	sp, #112	@ 0x70
 8002b9c:	bc08      	pop	{r3}
 8002b9e:	b003      	add	sp, #12
 8002ba0:	4718      	bx	r3
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	7fffffff 	.word	0x7fffffff
 8002ba8:	2000000c 	.word	0x2000000c
 8002bac:	ffff0208 	.word	0xffff0208

08002bb0 <memset>:
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	1882      	adds	r2, r0, r2
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d100      	bne.n	8002bba <memset+0xa>
 8002bb8:	4770      	bx	lr
 8002bba:	7019      	strb	r1, [r3, #0]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	e7f9      	b.n	8002bb4 <memset+0x4>

08002bc0 <__errno>:
 8002bc0:	4b01      	ldr	r3, [pc, #4]	@ (8002bc8 <__errno+0x8>)
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	4770      	bx	lr
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	2000000c 	.word	0x2000000c

08002bcc <__libc_init_array>:
 8002bcc:	b570      	push	{r4, r5, r6, lr}
 8002bce:	2600      	movs	r6, #0
 8002bd0:	4c0c      	ldr	r4, [pc, #48]	@ (8002c04 <__libc_init_array+0x38>)
 8002bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8002c08 <__libc_init_array+0x3c>)
 8002bd4:	1b64      	subs	r4, r4, r5
 8002bd6:	10a4      	asrs	r4, r4, #2
 8002bd8:	42a6      	cmp	r6, r4
 8002bda:	d109      	bne.n	8002bf0 <__libc_init_array+0x24>
 8002bdc:	2600      	movs	r6, #0
 8002bde:	f000 fc65 	bl	80034ac <_init>
 8002be2:	4c0a      	ldr	r4, [pc, #40]	@ (8002c0c <__libc_init_array+0x40>)
 8002be4:	4d0a      	ldr	r5, [pc, #40]	@ (8002c10 <__libc_init_array+0x44>)
 8002be6:	1b64      	subs	r4, r4, r5
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	42a6      	cmp	r6, r4
 8002bec:	d105      	bne.n	8002bfa <__libc_init_array+0x2e>
 8002bee:	bd70      	pop	{r4, r5, r6, pc}
 8002bf0:	00b3      	lsls	r3, r6, #2
 8002bf2:	58eb      	ldr	r3, [r5, r3]
 8002bf4:	4798      	blx	r3
 8002bf6:	3601      	adds	r6, #1
 8002bf8:	e7ee      	b.n	8002bd8 <__libc_init_array+0xc>
 8002bfa:	00b3      	lsls	r3, r6, #2
 8002bfc:	58eb      	ldr	r3, [r5, r3]
 8002bfe:	4798      	blx	r3
 8002c00:	3601      	adds	r6, #1
 8002c02:	e7f2      	b.n	8002bea <__libc_init_array+0x1e>
 8002c04:	08003588 	.word	0x08003588
 8002c08:	08003588 	.word	0x08003588
 8002c0c:	0800358c 	.word	0x0800358c
 8002c10:	08003588 	.word	0x08003588

08002c14 <__retarget_lock_acquire_recursive>:
 8002c14:	4770      	bx	lr

08002c16 <__retarget_lock_release_recursive>:
 8002c16:	4770      	bx	lr

08002c18 <_free_r>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	0005      	movs	r5, r0
 8002c1c:	1e0c      	subs	r4, r1, #0
 8002c1e:	d010      	beq.n	8002c42 <_free_r+0x2a>
 8002c20:	3c04      	subs	r4, #4
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	da00      	bge.n	8002c2a <_free_r+0x12>
 8002c28:	18e4      	adds	r4, r4, r3
 8002c2a:	0028      	movs	r0, r5
 8002c2c:	f000 f8e0 	bl	8002df0 <__malloc_lock>
 8002c30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca8 <_free_r+0x90>)
 8002c32:	6813      	ldr	r3, [r2, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <_free_r+0x2c>
 8002c38:	6063      	str	r3, [r4, #4]
 8002c3a:	6014      	str	r4, [r2, #0]
 8002c3c:	0028      	movs	r0, r5
 8002c3e:	f000 f8df 	bl	8002e00 <__malloc_unlock>
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	42a3      	cmp	r3, r4
 8002c46:	d908      	bls.n	8002c5a <_free_r+0x42>
 8002c48:	6820      	ldr	r0, [r4, #0]
 8002c4a:	1821      	adds	r1, r4, r0
 8002c4c:	428b      	cmp	r3, r1
 8002c4e:	d1f3      	bne.n	8002c38 <_free_r+0x20>
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	1809      	adds	r1, r1, r0
 8002c56:	6021      	str	r1, [r4, #0]
 8002c58:	e7ee      	b.n	8002c38 <_free_r+0x20>
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <_free_r+0x4e>
 8002c62:	42a3      	cmp	r3, r4
 8002c64:	d9f9      	bls.n	8002c5a <_free_r+0x42>
 8002c66:	6811      	ldr	r1, [r2, #0]
 8002c68:	1850      	adds	r0, r2, r1
 8002c6a:	42a0      	cmp	r0, r4
 8002c6c:	d10b      	bne.n	8002c86 <_free_r+0x6e>
 8002c6e:	6820      	ldr	r0, [r4, #0]
 8002c70:	1809      	adds	r1, r1, r0
 8002c72:	1850      	adds	r0, r2, r1
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	4283      	cmp	r3, r0
 8002c78:	d1e0      	bne.n	8002c3c <_free_r+0x24>
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	1841      	adds	r1, r0, r1
 8002c80:	6011      	str	r1, [r2, #0]
 8002c82:	6053      	str	r3, [r2, #4]
 8002c84:	e7da      	b.n	8002c3c <_free_r+0x24>
 8002c86:	42a0      	cmp	r0, r4
 8002c88:	d902      	bls.n	8002c90 <_free_r+0x78>
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	602b      	str	r3, [r5, #0]
 8002c8e:	e7d5      	b.n	8002c3c <_free_r+0x24>
 8002c90:	6820      	ldr	r0, [r4, #0]
 8002c92:	1821      	adds	r1, r4, r0
 8002c94:	428b      	cmp	r3, r1
 8002c96:	d103      	bne.n	8002ca0 <_free_r+0x88>
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	1809      	adds	r1, r1, r0
 8002c9e:	6021      	str	r1, [r4, #0]
 8002ca0:	6063      	str	r3, [r4, #4]
 8002ca2:	6054      	str	r4, [r2, #4]
 8002ca4:	e7ca      	b.n	8002c3c <_free_r+0x24>
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	200002d4 	.word	0x200002d4

08002cac <sbrk_aligned>:
 8002cac:	b570      	push	{r4, r5, r6, lr}
 8002cae:	4e0f      	ldr	r6, [pc, #60]	@ (8002cec <sbrk_aligned+0x40>)
 8002cb0:	000d      	movs	r5, r1
 8002cb2:	6831      	ldr	r1, [r6, #0]
 8002cb4:	0004      	movs	r4, r0
 8002cb6:	2900      	cmp	r1, #0
 8002cb8:	d102      	bne.n	8002cc0 <sbrk_aligned+0x14>
 8002cba:	f000 fb99 	bl	80033f0 <_sbrk_r>
 8002cbe:	6030      	str	r0, [r6, #0]
 8002cc0:	0029      	movs	r1, r5
 8002cc2:	0020      	movs	r0, r4
 8002cc4:	f000 fb94 	bl	80033f0 <_sbrk_r>
 8002cc8:	1c43      	adds	r3, r0, #1
 8002cca:	d103      	bne.n	8002cd4 <sbrk_aligned+0x28>
 8002ccc:	2501      	movs	r5, #1
 8002cce:	426d      	negs	r5, r5
 8002cd0:	0028      	movs	r0, r5
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	1cc5      	adds	r5, r0, #3
 8002cd8:	439d      	bics	r5, r3
 8002cda:	42a8      	cmp	r0, r5
 8002cdc:	d0f8      	beq.n	8002cd0 <sbrk_aligned+0x24>
 8002cde:	1a29      	subs	r1, r5, r0
 8002ce0:	0020      	movs	r0, r4
 8002ce2:	f000 fb85 	bl	80033f0 <_sbrk_r>
 8002ce6:	3001      	adds	r0, #1
 8002ce8:	d1f2      	bne.n	8002cd0 <sbrk_aligned+0x24>
 8002cea:	e7ef      	b.n	8002ccc <sbrk_aligned+0x20>
 8002cec:	200002d0 	.word	0x200002d0

08002cf0 <_malloc_r>:
 8002cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	1ccb      	adds	r3, r1, #3
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	0005      	movs	r5, r0
 8002cfc:	001f      	movs	r7, r3
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d234      	bcs.n	8002d6c <_malloc_r+0x7c>
 8002d02:	270c      	movs	r7, #12
 8002d04:	42b9      	cmp	r1, r7
 8002d06:	d833      	bhi.n	8002d70 <_malloc_r+0x80>
 8002d08:	0028      	movs	r0, r5
 8002d0a:	f000 f871 	bl	8002df0 <__malloc_lock>
 8002d0e:	4e37      	ldr	r6, [pc, #220]	@ (8002dec <_malloc_r+0xfc>)
 8002d10:	6833      	ldr	r3, [r6, #0]
 8002d12:	001c      	movs	r4, r3
 8002d14:	2c00      	cmp	r4, #0
 8002d16:	d12f      	bne.n	8002d78 <_malloc_r+0x88>
 8002d18:	0039      	movs	r1, r7
 8002d1a:	0028      	movs	r0, r5
 8002d1c:	f7ff ffc6 	bl	8002cac <sbrk_aligned>
 8002d20:	0004      	movs	r4, r0
 8002d22:	1c43      	adds	r3, r0, #1
 8002d24:	d15f      	bne.n	8002de6 <_malloc_r+0xf6>
 8002d26:	6834      	ldr	r4, [r6, #0]
 8002d28:	9400      	str	r4, [sp, #0]
 8002d2a:	9b00      	ldr	r3, [sp, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d14a      	bne.n	8002dc6 <_malloc_r+0xd6>
 8002d30:	2c00      	cmp	r4, #0
 8002d32:	d052      	beq.n	8002dda <_malloc_r+0xea>
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	0028      	movs	r0, r5
 8002d38:	18e3      	adds	r3, r4, r3
 8002d3a:	9900      	ldr	r1, [sp, #0]
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	f000 fb57 	bl	80033f0 <_sbrk_r>
 8002d42:	9b01      	ldr	r3, [sp, #4]
 8002d44:	4283      	cmp	r3, r0
 8002d46:	d148      	bne.n	8002dda <_malloc_r+0xea>
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	0028      	movs	r0, r5
 8002d4c:	1aff      	subs	r7, r7, r3
 8002d4e:	0039      	movs	r1, r7
 8002d50:	f7ff ffac 	bl	8002cac <sbrk_aligned>
 8002d54:	3001      	adds	r0, #1
 8002d56:	d040      	beq.n	8002dda <_malloc_r+0xea>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	19db      	adds	r3, r3, r7
 8002d5c:	6023      	str	r3, [r4, #0]
 8002d5e:	6833      	ldr	r3, [r6, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	2a00      	cmp	r2, #0
 8002d64:	d133      	bne.n	8002dce <_malloc_r+0xde>
 8002d66:	9b00      	ldr	r3, [sp, #0]
 8002d68:	6033      	str	r3, [r6, #0]
 8002d6a:	e019      	b.n	8002da0 <_malloc_r+0xb0>
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	dac9      	bge.n	8002d04 <_malloc_r+0x14>
 8002d70:	230c      	movs	r3, #12
 8002d72:	602b      	str	r3, [r5, #0]
 8002d74:	2000      	movs	r0, #0
 8002d76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d78:	6821      	ldr	r1, [r4, #0]
 8002d7a:	1bc9      	subs	r1, r1, r7
 8002d7c:	d420      	bmi.n	8002dc0 <_malloc_r+0xd0>
 8002d7e:	290b      	cmp	r1, #11
 8002d80:	d90a      	bls.n	8002d98 <_malloc_r+0xa8>
 8002d82:	19e2      	adds	r2, r4, r7
 8002d84:	6027      	str	r7, [r4, #0]
 8002d86:	42a3      	cmp	r3, r4
 8002d88:	d104      	bne.n	8002d94 <_malloc_r+0xa4>
 8002d8a:	6032      	str	r2, [r6, #0]
 8002d8c:	6863      	ldr	r3, [r4, #4]
 8002d8e:	6011      	str	r1, [r2, #0]
 8002d90:	6053      	str	r3, [r2, #4]
 8002d92:	e005      	b.n	8002da0 <_malloc_r+0xb0>
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	e7f9      	b.n	8002d8c <_malloc_r+0x9c>
 8002d98:	6862      	ldr	r2, [r4, #4]
 8002d9a:	42a3      	cmp	r3, r4
 8002d9c:	d10e      	bne.n	8002dbc <_malloc_r+0xcc>
 8002d9e:	6032      	str	r2, [r6, #0]
 8002da0:	0028      	movs	r0, r5
 8002da2:	f000 f82d 	bl	8002e00 <__malloc_unlock>
 8002da6:	0020      	movs	r0, r4
 8002da8:	2207      	movs	r2, #7
 8002daa:	300b      	adds	r0, #11
 8002dac:	1d23      	adds	r3, r4, #4
 8002dae:	4390      	bics	r0, r2
 8002db0:	1ac2      	subs	r2, r0, r3
 8002db2:	4298      	cmp	r0, r3
 8002db4:	d0df      	beq.n	8002d76 <_malloc_r+0x86>
 8002db6:	1a1b      	subs	r3, r3, r0
 8002db8:	50a3      	str	r3, [r4, r2]
 8002dba:	e7dc      	b.n	8002d76 <_malloc_r+0x86>
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	e7ef      	b.n	8002da0 <_malloc_r+0xb0>
 8002dc0:	0023      	movs	r3, r4
 8002dc2:	6864      	ldr	r4, [r4, #4]
 8002dc4:	e7a6      	b.n	8002d14 <_malloc_r+0x24>
 8002dc6:	9c00      	ldr	r4, [sp, #0]
 8002dc8:	6863      	ldr	r3, [r4, #4]
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	e7ad      	b.n	8002d2a <_malloc_r+0x3a>
 8002dce:	001a      	movs	r2, r3
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	42a3      	cmp	r3, r4
 8002dd4:	d1fb      	bne.n	8002dce <_malloc_r+0xde>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e7da      	b.n	8002d90 <_malloc_r+0xa0>
 8002dda:	230c      	movs	r3, #12
 8002ddc:	0028      	movs	r0, r5
 8002dde:	602b      	str	r3, [r5, #0]
 8002de0:	f000 f80e 	bl	8002e00 <__malloc_unlock>
 8002de4:	e7c6      	b.n	8002d74 <_malloc_r+0x84>
 8002de6:	6007      	str	r7, [r0, #0]
 8002de8:	e7da      	b.n	8002da0 <_malloc_r+0xb0>
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	200002d4 	.word	0x200002d4

08002df0 <__malloc_lock>:
 8002df0:	b510      	push	{r4, lr}
 8002df2:	4802      	ldr	r0, [pc, #8]	@ (8002dfc <__malloc_lock+0xc>)
 8002df4:	f7ff ff0e 	bl	8002c14 <__retarget_lock_acquire_recursive>
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	200002cc 	.word	0x200002cc

08002e00 <__malloc_unlock>:
 8002e00:	b510      	push	{r4, lr}
 8002e02:	4802      	ldr	r0, [pc, #8]	@ (8002e0c <__malloc_unlock+0xc>)
 8002e04:	f7ff ff07 	bl	8002c16 <__retarget_lock_release_recursive>
 8002e08:	bd10      	pop	{r4, pc}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	200002cc 	.word	0x200002cc

08002e10 <__ssputs_r>:
 8002e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e12:	688e      	ldr	r6, [r1, #8]
 8002e14:	b085      	sub	sp, #20
 8002e16:	001f      	movs	r7, r3
 8002e18:	000c      	movs	r4, r1
 8002e1a:	680b      	ldr	r3, [r1, #0]
 8002e1c:	9002      	str	r0, [sp, #8]
 8002e1e:	9203      	str	r2, [sp, #12]
 8002e20:	42be      	cmp	r6, r7
 8002e22:	d830      	bhi.n	8002e86 <__ssputs_r+0x76>
 8002e24:	210c      	movs	r1, #12
 8002e26:	5e62      	ldrsh	r2, [r4, r1]
 8002e28:	2190      	movs	r1, #144	@ 0x90
 8002e2a:	00c9      	lsls	r1, r1, #3
 8002e2c:	420a      	tst	r2, r1
 8002e2e:	d028      	beq.n	8002e82 <__ssputs_r+0x72>
 8002e30:	2003      	movs	r0, #3
 8002e32:	6921      	ldr	r1, [r4, #16]
 8002e34:	1a5b      	subs	r3, r3, r1
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	6963      	ldr	r3, [r4, #20]
 8002e3a:	4343      	muls	r3, r0
 8002e3c:	9801      	ldr	r0, [sp, #4]
 8002e3e:	0fdd      	lsrs	r5, r3, #31
 8002e40:	18ed      	adds	r5, r5, r3
 8002e42:	1c7b      	adds	r3, r7, #1
 8002e44:	181b      	adds	r3, r3, r0
 8002e46:	106d      	asrs	r5, r5, #1
 8002e48:	42ab      	cmp	r3, r5
 8002e4a:	d900      	bls.n	8002e4e <__ssputs_r+0x3e>
 8002e4c:	001d      	movs	r5, r3
 8002e4e:	0552      	lsls	r2, r2, #21
 8002e50:	d528      	bpl.n	8002ea4 <__ssputs_r+0x94>
 8002e52:	0029      	movs	r1, r5
 8002e54:	9802      	ldr	r0, [sp, #8]
 8002e56:	f7ff ff4b 	bl	8002cf0 <_malloc_r>
 8002e5a:	1e06      	subs	r6, r0, #0
 8002e5c:	d02c      	beq.n	8002eb8 <__ssputs_r+0xa8>
 8002e5e:	9a01      	ldr	r2, [sp, #4]
 8002e60:	6921      	ldr	r1, [r4, #16]
 8002e62:	f000 fae2 	bl	800342a <memcpy>
 8002e66:	89a2      	ldrh	r2, [r4, #12]
 8002e68:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <__ssputs_r+0xbc>)
 8002e6a:	401a      	ands	r2, r3
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	81a3      	strh	r3, [r4, #12]
 8002e72:	9b01      	ldr	r3, [sp, #4]
 8002e74:	6126      	str	r6, [r4, #16]
 8002e76:	18f6      	adds	r6, r6, r3
 8002e78:	6026      	str	r6, [r4, #0]
 8002e7a:	003e      	movs	r6, r7
 8002e7c:	6165      	str	r5, [r4, #20]
 8002e7e:	1aed      	subs	r5, r5, r3
 8002e80:	60a5      	str	r5, [r4, #8]
 8002e82:	42be      	cmp	r6, r7
 8002e84:	d900      	bls.n	8002e88 <__ssputs_r+0x78>
 8002e86:	003e      	movs	r6, r7
 8002e88:	0032      	movs	r2, r6
 8002e8a:	9903      	ldr	r1, [sp, #12]
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	f000 fa9b 	bl	80033c8 <memmove>
 8002e92:	2000      	movs	r0, #0
 8002e94:	68a3      	ldr	r3, [r4, #8]
 8002e96:	1b9b      	subs	r3, r3, r6
 8002e98:	60a3      	str	r3, [r4, #8]
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	199b      	adds	r3, r3, r6
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	b005      	add	sp, #20
 8002ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ea4:	002a      	movs	r2, r5
 8002ea6:	9802      	ldr	r0, [sp, #8]
 8002ea8:	f000 fac8 	bl	800343c <_realloc_r>
 8002eac:	1e06      	subs	r6, r0, #0
 8002eae:	d1e0      	bne.n	8002e72 <__ssputs_r+0x62>
 8002eb0:	6921      	ldr	r1, [r4, #16]
 8002eb2:	9802      	ldr	r0, [sp, #8]
 8002eb4:	f7ff feb0 	bl	8002c18 <_free_r>
 8002eb8:	230c      	movs	r3, #12
 8002eba:	2001      	movs	r0, #1
 8002ebc:	9a02      	ldr	r2, [sp, #8]
 8002ebe:	4240      	negs	r0, r0
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	89a2      	ldrh	r2, [r4, #12]
 8002ec4:	3334      	adds	r3, #52	@ 0x34
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	81a3      	strh	r3, [r4, #12]
 8002eca:	e7e9      	b.n	8002ea0 <__ssputs_r+0x90>
 8002ecc:	fffffb7f 	.word	0xfffffb7f

08002ed0 <_svfiprintf_r>:
 8002ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed2:	b0a1      	sub	sp, #132	@ 0x84
 8002ed4:	9003      	str	r0, [sp, #12]
 8002ed6:	001d      	movs	r5, r3
 8002ed8:	898b      	ldrh	r3, [r1, #12]
 8002eda:	000f      	movs	r7, r1
 8002edc:	0016      	movs	r6, r2
 8002ede:	061b      	lsls	r3, r3, #24
 8002ee0:	d511      	bpl.n	8002f06 <_svfiprintf_r+0x36>
 8002ee2:	690b      	ldr	r3, [r1, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10e      	bne.n	8002f06 <_svfiprintf_r+0x36>
 8002ee8:	2140      	movs	r1, #64	@ 0x40
 8002eea:	f7ff ff01 	bl	8002cf0 <_malloc_r>
 8002eee:	6038      	str	r0, [r7, #0]
 8002ef0:	6138      	str	r0, [r7, #16]
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d105      	bne.n	8002f02 <_svfiprintf_r+0x32>
 8002ef6:	230c      	movs	r3, #12
 8002ef8:	9a03      	ldr	r2, [sp, #12]
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	2001      	movs	r0, #1
 8002efe:	4240      	negs	r0, r0
 8002f00:	e0cf      	b.n	80030a2 <_svfiprintf_r+0x1d2>
 8002f02:	2340      	movs	r3, #64	@ 0x40
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	2300      	movs	r3, #0
 8002f08:	ac08      	add	r4, sp, #32
 8002f0a:	6163      	str	r3, [r4, #20]
 8002f0c:	3320      	adds	r3, #32
 8002f0e:	7663      	strb	r3, [r4, #25]
 8002f10:	3310      	adds	r3, #16
 8002f12:	76a3      	strb	r3, [r4, #26]
 8002f14:	9507      	str	r5, [sp, #28]
 8002f16:	0035      	movs	r5, r6
 8002f18:	782b      	ldrb	r3, [r5, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <_svfiprintf_r+0x52>
 8002f1e:	2b25      	cmp	r3, #37	@ 0x25
 8002f20:	d148      	bne.n	8002fb4 <_svfiprintf_r+0xe4>
 8002f22:	1bab      	subs	r3, r5, r6
 8002f24:	9305      	str	r3, [sp, #20]
 8002f26:	42b5      	cmp	r5, r6
 8002f28:	d00b      	beq.n	8002f42 <_svfiprintf_r+0x72>
 8002f2a:	0032      	movs	r2, r6
 8002f2c:	0039      	movs	r1, r7
 8002f2e:	9803      	ldr	r0, [sp, #12]
 8002f30:	f7ff ff6e 	bl	8002e10 <__ssputs_r>
 8002f34:	3001      	adds	r0, #1
 8002f36:	d100      	bne.n	8002f3a <_svfiprintf_r+0x6a>
 8002f38:	e0ae      	b.n	8003098 <_svfiprintf_r+0x1c8>
 8002f3a:	6963      	ldr	r3, [r4, #20]
 8002f3c:	9a05      	ldr	r2, [sp, #20]
 8002f3e:	189b      	adds	r3, r3, r2
 8002f40:	6163      	str	r3, [r4, #20]
 8002f42:	782b      	ldrb	r3, [r5, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d100      	bne.n	8002f4a <_svfiprintf_r+0x7a>
 8002f48:	e0a6      	b.n	8003098 <_svfiprintf_r+0x1c8>
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	4252      	negs	r2, r2
 8002f50:	6062      	str	r2, [r4, #4]
 8002f52:	a904      	add	r1, sp, #16
 8002f54:	3254      	adds	r2, #84	@ 0x54
 8002f56:	1852      	adds	r2, r2, r1
 8002f58:	1c6e      	adds	r6, r5, #1
 8002f5a:	6023      	str	r3, [r4, #0]
 8002f5c:	60e3      	str	r3, [r4, #12]
 8002f5e:	60a3      	str	r3, [r4, #8]
 8002f60:	7013      	strb	r3, [r2, #0]
 8002f62:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002f64:	4b54      	ldr	r3, [pc, #336]	@ (80030b8 <_svfiprintf_r+0x1e8>)
 8002f66:	2205      	movs	r2, #5
 8002f68:	0018      	movs	r0, r3
 8002f6a:	7831      	ldrb	r1, [r6, #0]
 8002f6c:	9305      	str	r3, [sp, #20]
 8002f6e:	f000 fa51 	bl	8003414 <memchr>
 8002f72:	1c75      	adds	r5, r6, #1
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d11f      	bne.n	8002fb8 <_svfiprintf_r+0xe8>
 8002f78:	6822      	ldr	r2, [r4, #0]
 8002f7a:	06d3      	lsls	r3, r2, #27
 8002f7c:	d504      	bpl.n	8002f88 <_svfiprintf_r+0xb8>
 8002f7e:	2353      	movs	r3, #83	@ 0x53
 8002f80:	a904      	add	r1, sp, #16
 8002f82:	185b      	adds	r3, r3, r1
 8002f84:	2120      	movs	r1, #32
 8002f86:	7019      	strb	r1, [r3, #0]
 8002f88:	0713      	lsls	r3, r2, #28
 8002f8a:	d504      	bpl.n	8002f96 <_svfiprintf_r+0xc6>
 8002f8c:	2353      	movs	r3, #83	@ 0x53
 8002f8e:	a904      	add	r1, sp, #16
 8002f90:	185b      	adds	r3, r3, r1
 8002f92:	212b      	movs	r1, #43	@ 0x2b
 8002f94:	7019      	strb	r1, [r3, #0]
 8002f96:	7833      	ldrb	r3, [r6, #0]
 8002f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f9a:	d016      	beq.n	8002fca <_svfiprintf_r+0xfa>
 8002f9c:	0035      	movs	r5, r6
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	200a      	movs	r0, #10
 8002fa2:	68e3      	ldr	r3, [r4, #12]
 8002fa4:	782a      	ldrb	r2, [r5, #0]
 8002fa6:	1c6e      	adds	r6, r5, #1
 8002fa8:	3a30      	subs	r2, #48	@ 0x30
 8002faa:	2a09      	cmp	r2, #9
 8002fac:	d950      	bls.n	8003050 <_svfiprintf_r+0x180>
 8002fae:	2900      	cmp	r1, #0
 8002fb0:	d111      	bne.n	8002fd6 <_svfiprintf_r+0x106>
 8002fb2:	e017      	b.n	8002fe4 <_svfiprintf_r+0x114>
 8002fb4:	3501      	adds	r5, #1
 8002fb6:	e7af      	b.n	8002f18 <_svfiprintf_r+0x48>
 8002fb8:	9b05      	ldr	r3, [sp, #20]
 8002fba:	6822      	ldr	r2, [r4, #0]
 8002fbc:	1ac0      	subs	r0, r0, r3
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	4083      	lsls	r3, r0
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	002e      	movs	r6, r5
 8002fc6:	6023      	str	r3, [r4, #0]
 8002fc8:	e7cc      	b.n	8002f64 <_svfiprintf_r+0x94>
 8002fca:	9b07      	ldr	r3, [sp, #28]
 8002fcc:	1d19      	adds	r1, r3, #4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	9107      	str	r1, [sp, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	db01      	blt.n	8002fda <_svfiprintf_r+0x10a>
 8002fd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002fd8:	e004      	b.n	8002fe4 <_svfiprintf_r+0x114>
 8002fda:	425b      	negs	r3, r3
 8002fdc:	60e3      	str	r3, [r4, #12]
 8002fde:	2302      	movs	r3, #2
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	6023      	str	r3, [r4, #0]
 8002fe4:	782b      	ldrb	r3, [r5, #0]
 8002fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fe8:	d10c      	bne.n	8003004 <_svfiprintf_r+0x134>
 8002fea:	786b      	ldrb	r3, [r5, #1]
 8002fec:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fee:	d134      	bne.n	800305a <_svfiprintf_r+0x18a>
 8002ff0:	9b07      	ldr	r3, [sp, #28]
 8002ff2:	3502      	adds	r5, #2
 8002ff4:	1d1a      	adds	r2, r3, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	9207      	str	r2, [sp, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	da01      	bge.n	8003002 <_svfiprintf_r+0x132>
 8002ffe:	2301      	movs	r3, #1
 8003000:	425b      	negs	r3, r3
 8003002:	9309      	str	r3, [sp, #36]	@ 0x24
 8003004:	4e2d      	ldr	r6, [pc, #180]	@ (80030bc <_svfiprintf_r+0x1ec>)
 8003006:	2203      	movs	r2, #3
 8003008:	0030      	movs	r0, r6
 800300a:	7829      	ldrb	r1, [r5, #0]
 800300c:	f000 fa02 	bl	8003414 <memchr>
 8003010:	2800      	cmp	r0, #0
 8003012:	d006      	beq.n	8003022 <_svfiprintf_r+0x152>
 8003014:	2340      	movs	r3, #64	@ 0x40
 8003016:	1b80      	subs	r0, r0, r6
 8003018:	4083      	lsls	r3, r0
 800301a:	6822      	ldr	r2, [r4, #0]
 800301c:	3501      	adds	r5, #1
 800301e:	4313      	orrs	r3, r2
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	7829      	ldrb	r1, [r5, #0]
 8003024:	2206      	movs	r2, #6
 8003026:	4826      	ldr	r0, [pc, #152]	@ (80030c0 <_svfiprintf_r+0x1f0>)
 8003028:	1c6e      	adds	r6, r5, #1
 800302a:	7621      	strb	r1, [r4, #24]
 800302c:	f000 f9f2 	bl	8003414 <memchr>
 8003030:	2800      	cmp	r0, #0
 8003032:	d038      	beq.n	80030a6 <_svfiprintf_r+0x1d6>
 8003034:	4b23      	ldr	r3, [pc, #140]	@ (80030c4 <_svfiprintf_r+0x1f4>)
 8003036:	2b00      	cmp	r3, #0
 8003038:	d122      	bne.n	8003080 <_svfiprintf_r+0x1b0>
 800303a:	2207      	movs	r2, #7
 800303c:	9b07      	ldr	r3, [sp, #28]
 800303e:	3307      	adds	r3, #7
 8003040:	4393      	bics	r3, r2
 8003042:	3308      	adds	r3, #8
 8003044:	9307      	str	r3, [sp, #28]
 8003046:	6963      	ldr	r3, [r4, #20]
 8003048:	9a04      	ldr	r2, [sp, #16]
 800304a:	189b      	adds	r3, r3, r2
 800304c:	6163      	str	r3, [r4, #20]
 800304e:	e762      	b.n	8002f16 <_svfiprintf_r+0x46>
 8003050:	4343      	muls	r3, r0
 8003052:	0035      	movs	r5, r6
 8003054:	2101      	movs	r1, #1
 8003056:	189b      	adds	r3, r3, r2
 8003058:	e7a4      	b.n	8002fa4 <_svfiprintf_r+0xd4>
 800305a:	2300      	movs	r3, #0
 800305c:	200a      	movs	r0, #10
 800305e:	0019      	movs	r1, r3
 8003060:	3501      	adds	r5, #1
 8003062:	6063      	str	r3, [r4, #4]
 8003064:	782a      	ldrb	r2, [r5, #0]
 8003066:	1c6e      	adds	r6, r5, #1
 8003068:	3a30      	subs	r2, #48	@ 0x30
 800306a:	2a09      	cmp	r2, #9
 800306c:	d903      	bls.n	8003076 <_svfiprintf_r+0x1a6>
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0c8      	beq.n	8003004 <_svfiprintf_r+0x134>
 8003072:	9109      	str	r1, [sp, #36]	@ 0x24
 8003074:	e7c6      	b.n	8003004 <_svfiprintf_r+0x134>
 8003076:	4341      	muls	r1, r0
 8003078:	0035      	movs	r5, r6
 800307a:	2301      	movs	r3, #1
 800307c:	1889      	adds	r1, r1, r2
 800307e:	e7f1      	b.n	8003064 <_svfiprintf_r+0x194>
 8003080:	aa07      	add	r2, sp, #28
 8003082:	9200      	str	r2, [sp, #0]
 8003084:	0021      	movs	r1, r4
 8003086:	003a      	movs	r2, r7
 8003088:	4b0f      	ldr	r3, [pc, #60]	@ (80030c8 <_svfiprintf_r+0x1f8>)
 800308a:	9803      	ldr	r0, [sp, #12]
 800308c:	e000      	b.n	8003090 <_svfiprintf_r+0x1c0>
 800308e:	bf00      	nop
 8003090:	9004      	str	r0, [sp, #16]
 8003092:	9b04      	ldr	r3, [sp, #16]
 8003094:	3301      	adds	r3, #1
 8003096:	d1d6      	bne.n	8003046 <_svfiprintf_r+0x176>
 8003098:	89bb      	ldrh	r3, [r7, #12]
 800309a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800309c:	065b      	lsls	r3, r3, #25
 800309e:	d500      	bpl.n	80030a2 <_svfiprintf_r+0x1d2>
 80030a0:	e72c      	b.n	8002efc <_svfiprintf_r+0x2c>
 80030a2:	b021      	add	sp, #132	@ 0x84
 80030a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030a6:	aa07      	add	r2, sp, #28
 80030a8:	9200      	str	r2, [sp, #0]
 80030aa:	0021      	movs	r1, r4
 80030ac:	003a      	movs	r2, r7
 80030ae:	4b06      	ldr	r3, [pc, #24]	@ (80030c8 <_svfiprintf_r+0x1f8>)
 80030b0:	9803      	ldr	r0, [sp, #12]
 80030b2:	f000 f87b 	bl	80031ac <_printf_i>
 80030b6:	e7eb      	b.n	8003090 <_svfiprintf_r+0x1c0>
 80030b8:	0800354c 	.word	0x0800354c
 80030bc:	08003552 	.word	0x08003552
 80030c0:	08003556 	.word	0x08003556
 80030c4:	00000000 	.word	0x00000000
 80030c8:	08002e11 	.word	0x08002e11

080030cc <_printf_common>:
 80030cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030ce:	0016      	movs	r6, r2
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	688a      	ldr	r2, [r1, #8]
 80030d4:	690b      	ldr	r3, [r1, #16]
 80030d6:	000c      	movs	r4, r1
 80030d8:	9000      	str	r0, [sp, #0]
 80030da:	4293      	cmp	r3, r2
 80030dc:	da00      	bge.n	80030e0 <_printf_common+0x14>
 80030de:	0013      	movs	r3, r2
 80030e0:	0022      	movs	r2, r4
 80030e2:	6033      	str	r3, [r6, #0]
 80030e4:	3243      	adds	r2, #67	@ 0x43
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	2a00      	cmp	r2, #0
 80030ea:	d001      	beq.n	80030f0 <_printf_common+0x24>
 80030ec:	3301      	adds	r3, #1
 80030ee:	6033      	str	r3, [r6, #0]
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	069b      	lsls	r3, r3, #26
 80030f4:	d502      	bpl.n	80030fc <_printf_common+0x30>
 80030f6:	6833      	ldr	r3, [r6, #0]
 80030f8:	3302      	adds	r3, #2
 80030fa:	6033      	str	r3, [r6, #0]
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	2306      	movs	r3, #6
 8003100:	0015      	movs	r5, r2
 8003102:	401d      	ands	r5, r3
 8003104:	421a      	tst	r2, r3
 8003106:	d027      	beq.n	8003158 <_printf_common+0x8c>
 8003108:	0023      	movs	r3, r4
 800310a:	3343      	adds	r3, #67	@ 0x43
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	1e5a      	subs	r2, r3, #1
 8003110:	4193      	sbcs	r3, r2
 8003112:	6822      	ldr	r2, [r4, #0]
 8003114:	0692      	lsls	r2, r2, #26
 8003116:	d430      	bmi.n	800317a <_printf_common+0xae>
 8003118:	0022      	movs	r2, r4
 800311a:	9901      	ldr	r1, [sp, #4]
 800311c:	9800      	ldr	r0, [sp, #0]
 800311e:	9d08      	ldr	r5, [sp, #32]
 8003120:	3243      	adds	r2, #67	@ 0x43
 8003122:	47a8      	blx	r5
 8003124:	3001      	adds	r0, #1
 8003126:	d025      	beq.n	8003174 <_printf_common+0xa8>
 8003128:	2206      	movs	r2, #6
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	2500      	movs	r5, #0
 800312e:	4013      	ands	r3, r2
 8003130:	2b04      	cmp	r3, #4
 8003132:	d105      	bne.n	8003140 <_printf_common+0x74>
 8003134:	6833      	ldr	r3, [r6, #0]
 8003136:	68e5      	ldr	r5, [r4, #12]
 8003138:	1aed      	subs	r5, r5, r3
 800313a:	43eb      	mvns	r3, r5
 800313c:	17db      	asrs	r3, r3, #31
 800313e:	401d      	ands	r5, r3
 8003140:	68a3      	ldr	r3, [r4, #8]
 8003142:	6922      	ldr	r2, [r4, #16]
 8003144:	4293      	cmp	r3, r2
 8003146:	dd01      	ble.n	800314c <_printf_common+0x80>
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	18ed      	adds	r5, r5, r3
 800314c:	2600      	movs	r6, #0
 800314e:	42b5      	cmp	r5, r6
 8003150:	d120      	bne.n	8003194 <_printf_common+0xc8>
 8003152:	2000      	movs	r0, #0
 8003154:	e010      	b.n	8003178 <_printf_common+0xac>
 8003156:	3501      	adds	r5, #1
 8003158:	68e3      	ldr	r3, [r4, #12]
 800315a:	6832      	ldr	r2, [r6, #0]
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	42ab      	cmp	r3, r5
 8003160:	ddd2      	ble.n	8003108 <_printf_common+0x3c>
 8003162:	0022      	movs	r2, r4
 8003164:	2301      	movs	r3, #1
 8003166:	9901      	ldr	r1, [sp, #4]
 8003168:	9800      	ldr	r0, [sp, #0]
 800316a:	9f08      	ldr	r7, [sp, #32]
 800316c:	3219      	adds	r2, #25
 800316e:	47b8      	blx	r7
 8003170:	3001      	adds	r0, #1
 8003172:	d1f0      	bne.n	8003156 <_printf_common+0x8a>
 8003174:	2001      	movs	r0, #1
 8003176:	4240      	negs	r0, r0
 8003178:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800317a:	2030      	movs	r0, #48	@ 0x30
 800317c:	18e1      	adds	r1, r4, r3
 800317e:	3143      	adds	r1, #67	@ 0x43
 8003180:	7008      	strb	r0, [r1, #0]
 8003182:	0021      	movs	r1, r4
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	3145      	adds	r1, #69	@ 0x45
 8003188:	7809      	ldrb	r1, [r1, #0]
 800318a:	18a2      	adds	r2, r4, r2
 800318c:	3243      	adds	r2, #67	@ 0x43
 800318e:	3302      	adds	r3, #2
 8003190:	7011      	strb	r1, [r2, #0]
 8003192:	e7c1      	b.n	8003118 <_printf_common+0x4c>
 8003194:	0022      	movs	r2, r4
 8003196:	2301      	movs	r3, #1
 8003198:	9901      	ldr	r1, [sp, #4]
 800319a:	9800      	ldr	r0, [sp, #0]
 800319c:	9f08      	ldr	r7, [sp, #32]
 800319e:	321a      	adds	r2, #26
 80031a0:	47b8      	blx	r7
 80031a2:	3001      	adds	r0, #1
 80031a4:	d0e6      	beq.n	8003174 <_printf_common+0xa8>
 80031a6:	3601      	adds	r6, #1
 80031a8:	e7d1      	b.n	800314e <_printf_common+0x82>
	...

080031ac <_printf_i>:
 80031ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ae:	b08b      	sub	sp, #44	@ 0x2c
 80031b0:	9206      	str	r2, [sp, #24]
 80031b2:	000a      	movs	r2, r1
 80031b4:	3243      	adds	r2, #67	@ 0x43
 80031b6:	9307      	str	r3, [sp, #28]
 80031b8:	9005      	str	r0, [sp, #20]
 80031ba:	9203      	str	r2, [sp, #12]
 80031bc:	7e0a      	ldrb	r2, [r1, #24]
 80031be:	000c      	movs	r4, r1
 80031c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80031c2:	2a78      	cmp	r2, #120	@ 0x78
 80031c4:	d809      	bhi.n	80031da <_printf_i+0x2e>
 80031c6:	2a62      	cmp	r2, #98	@ 0x62
 80031c8:	d80b      	bhi.n	80031e2 <_printf_i+0x36>
 80031ca:	2a00      	cmp	r2, #0
 80031cc:	d100      	bne.n	80031d0 <_printf_i+0x24>
 80031ce:	e0bc      	b.n	800334a <_printf_i+0x19e>
 80031d0:	497b      	ldr	r1, [pc, #492]	@ (80033c0 <_printf_i+0x214>)
 80031d2:	9104      	str	r1, [sp, #16]
 80031d4:	2a58      	cmp	r2, #88	@ 0x58
 80031d6:	d100      	bne.n	80031da <_printf_i+0x2e>
 80031d8:	e090      	b.n	80032fc <_printf_i+0x150>
 80031da:	0025      	movs	r5, r4
 80031dc:	3542      	adds	r5, #66	@ 0x42
 80031de:	702a      	strb	r2, [r5, #0]
 80031e0:	e022      	b.n	8003228 <_printf_i+0x7c>
 80031e2:	0010      	movs	r0, r2
 80031e4:	3863      	subs	r0, #99	@ 0x63
 80031e6:	2815      	cmp	r0, #21
 80031e8:	d8f7      	bhi.n	80031da <_printf_i+0x2e>
 80031ea:	f7fc ff95 	bl	8000118 <__gnu_thumb1_case_shi>
 80031ee:	0016      	.short	0x0016
 80031f0:	fff6001f 	.word	0xfff6001f
 80031f4:	fff6fff6 	.word	0xfff6fff6
 80031f8:	001ffff6 	.word	0x001ffff6
 80031fc:	fff6fff6 	.word	0xfff6fff6
 8003200:	fff6fff6 	.word	0xfff6fff6
 8003204:	003600a1 	.word	0x003600a1
 8003208:	fff60080 	.word	0xfff60080
 800320c:	00b2fff6 	.word	0x00b2fff6
 8003210:	0036fff6 	.word	0x0036fff6
 8003214:	fff6fff6 	.word	0xfff6fff6
 8003218:	0084      	.short	0x0084
 800321a:	0025      	movs	r5, r4
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	3542      	adds	r5, #66	@ 0x42
 8003220:	1d11      	adds	r1, r2, #4
 8003222:	6019      	str	r1, [r3, #0]
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	702b      	strb	r3, [r5, #0]
 8003228:	2301      	movs	r3, #1
 800322a:	e0a0      	b.n	800336e <_printf_i+0x1c2>
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	6809      	ldr	r1, [r1, #0]
 8003230:	1d02      	adds	r2, r0, #4
 8003232:	060d      	lsls	r5, r1, #24
 8003234:	d50b      	bpl.n	800324e <_printf_i+0xa2>
 8003236:	6806      	ldr	r6, [r0, #0]
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	2e00      	cmp	r6, #0
 800323c:	da03      	bge.n	8003246 <_printf_i+0x9a>
 800323e:	232d      	movs	r3, #45	@ 0x2d
 8003240:	9a03      	ldr	r2, [sp, #12]
 8003242:	4276      	negs	r6, r6
 8003244:	7013      	strb	r3, [r2, #0]
 8003246:	4b5e      	ldr	r3, [pc, #376]	@ (80033c0 <_printf_i+0x214>)
 8003248:	270a      	movs	r7, #10
 800324a:	9304      	str	r3, [sp, #16]
 800324c:	e018      	b.n	8003280 <_printf_i+0xd4>
 800324e:	6806      	ldr	r6, [r0, #0]
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	0649      	lsls	r1, r1, #25
 8003254:	d5f1      	bpl.n	800323a <_printf_i+0x8e>
 8003256:	b236      	sxth	r6, r6
 8003258:	e7ef      	b.n	800323a <_printf_i+0x8e>
 800325a:	6808      	ldr	r0, [r1, #0]
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	c940      	ldmia	r1!, {r6}
 8003260:	0605      	lsls	r5, r0, #24
 8003262:	d402      	bmi.n	800326a <_printf_i+0xbe>
 8003264:	0640      	lsls	r0, r0, #25
 8003266:	d500      	bpl.n	800326a <_printf_i+0xbe>
 8003268:	b2b6      	uxth	r6, r6
 800326a:	6019      	str	r1, [r3, #0]
 800326c:	4b54      	ldr	r3, [pc, #336]	@ (80033c0 <_printf_i+0x214>)
 800326e:	270a      	movs	r7, #10
 8003270:	9304      	str	r3, [sp, #16]
 8003272:	2a6f      	cmp	r2, #111	@ 0x6f
 8003274:	d100      	bne.n	8003278 <_printf_i+0xcc>
 8003276:	3f02      	subs	r7, #2
 8003278:	0023      	movs	r3, r4
 800327a:	2200      	movs	r2, #0
 800327c:	3343      	adds	r3, #67	@ 0x43
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	6863      	ldr	r3, [r4, #4]
 8003282:	60a3      	str	r3, [r4, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	db03      	blt.n	8003290 <_printf_i+0xe4>
 8003288:	2104      	movs	r1, #4
 800328a:	6822      	ldr	r2, [r4, #0]
 800328c:	438a      	bics	r2, r1
 800328e:	6022      	str	r2, [r4, #0]
 8003290:	2e00      	cmp	r6, #0
 8003292:	d102      	bne.n	800329a <_printf_i+0xee>
 8003294:	9d03      	ldr	r5, [sp, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00c      	beq.n	80032b4 <_printf_i+0x108>
 800329a:	9d03      	ldr	r5, [sp, #12]
 800329c:	0030      	movs	r0, r6
 800329e:	0039      	movs	r1, r7
 80032a0:	f7fc ffca 	bl	8000238 <__aeabi_uidivmod>
 80032a4:	9b04      	ldr	r3, [sp, #16]
 80032a6:	3d01      	subs	r5, #1
 80032a8:	5c5b      	ldrb	r3, [r3, r1]
 80032aa:	702b      	strb	r3, [r5, #0]
 80032ac:	0033      	movs	r3, r6
 80032ae:	0006      	movs	r6, r0
 80032b0:	429f      	cmp	r7, r3
 80032b2:	d9f3      	bls.n	800329c <_printf_i+0xf0>
 80032b4:	2f08      	cmp	r7, #8
 80032b6:	d109      	bne.n	80032cc <_printf_i+0x120>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	07db      	lsls	r3, r3, #31
 80032bc:	d506      	bpl.n	80032cc <_printf_i+0x120>
 80032be:	6862      	ldr	r2, [r4, #4]
 80032c0:	6923      	ldr	r3, [r4, #16]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	dc02      	bgt.n	80032cc <_printf_i+0x120>
 80032c6:	2330      	movs	r3, #48	@ 0x30
 80032c8:	3d01      	subs	r5, #1
 80032ca:	702b      	strb	r3, [r5, #0]
 80032cc:	9b03      	ldr	r3, [sp, #12]
 80032ce:	1b5b      	subs	r3, r3, r5
 80032d0:	6123      	str	r3, [r4, #16]
 80032d2:	9b07      	ldr	r3, [sp, #28]
 80032d4:	0021      	movs	r1, r4
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	9805      	ldr	r0, [sp, #20]
 80032da:	9b06      	ldr	r3, [sp, #24]
 80032dc:	aa09      	add	r2, sp, #36	@ 0x24
 80032de:	f7ff fef5 	bl	80030cc <_printf_common>
 80032e2:	3001      	adds	r0, #1
 80032e4:	d148      	bne.n	8003378 <_printf_i+0x1cc>
 80032e6:	2001      	movs	r0, #1
 80032e8:	4240      	negs	r0, r0
 80032ea:	b00b      	add	sp, #44	@ 0x2c
 80032ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ee:	2220      	movs	r2, #32
 80032f0:	6809      	ldr	r1, [r1, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	6022      	str	r2, [r4, #0]
 80032f6:	2278      	movs	r2, #120	@ 0x78
 80032f8:	4932      	ldr	r1, [pc, #200]	@ (80033c4 <_printf_i+0x218>)
 80032fa:	9104      	str	r1, [sp, #16]
 80032fc:	0021      	movs	r1, r4
 80032fe:	3145      	adds	r1, #69	@ 0x45
 8003300:	700a      	strb	r2, [r1, #0]
 8003302:	6819      	ldr	r1, [r3, #0]
 8003304:	6822      	ldr	r2, [r4, #0]
 8003306:	c940      	ldmia	r1!, {r6}
 8003308:	0610      	lsls	r0, r2, #24
 800330a:	d402      	bmi.n	8003312 <_printf_i+0x166>
 800330c:	0650      	lsls	r0, r2, #25
 800330e:	d500      	bpl.n	8003312 <_printf_i+0x166>
 8003310:	b2b6      	uxth	r6, r6
 8003312:	6019      	str	r1, [r3, #0]
 8003314:	07d3      	lsls	r3, r2, #31
 8003316:	d502      	bpl.n	800331e <_printf_i+0x172>
 8003318:	2320      	movs	r3, #32
 800331a:	4313      	orrs	r3, r2
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	2e00      	cmp	r6, #0
 8003320:	d001      	beq.n	8003326 <_printf_i+0x17a>
 8003322:	2710      	movs	r7, #16
 8003324:	e7a8      	b.n	8003278 <_printf_i+0xcc>
 8003326:	2220      	movs	r2, #32
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	4393      	bics	r3, r2
 800332c:	6023      	str	r3, [r4, #0]
 800332e:	e7f8      	b.n	8003322 <_printf_i+0x176>
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	680d      	ldr	r5, [r1, #0]
 8003334:	1d10      	adds	r0, r2, #4
 8003336:	6949      	ldr	r1, [r1, #20]
 8003338:	6018      	str	r0, [r3, #0]
 800333a:	6813      	ldr	r3, [r2, #0]
 800333c:	062e      	lsls	r6, r5, #24
 800333e:	d501      	bpl.n	8003344 <_printf_i+0x198>
 8003340:	6019      	str	r1, [r3, #0]
 8003342:	e002      	b.n	800334a <_printf_i+0x19e>
 8003344:	066d      	lsls	r5, r5, #25
 8003346:	d5fb      	bpl.n	8003340 <_printf_i+0x194>
 8003348:	8019      	strh	r1, [r3, #0]
 800334a:	2300      	movs	r3, #0
 800334c:	9d03      	ldr	r5, [sp, #12]
 800334e:	6123      	str	r3, [r4, #16]
 8003350:	e7bf      	b.n	80032d2 <_printf_i+0x126>
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	1d11      	adds	r1, r2, #4
 8003356:	6019      	str	r1, [r3, #0]
 8003358:	6815      	ldr	r5, [r2, #0]
 800335a:	2100      	movs	r1, #0
 800335c:	0028      	movs	r0, r5
 800335e:	6862      	ldr	r2, [r4, #4]
 8003360:	f000 f858 	bl	8003414 <memchr>
 8003364:	2800      	cmp	r0, #0
 8003366:	d001      	beq.n	800336c <_printf_i+0x1c0>
 8003368:	1b40      	subs	r0, r0, r5
 800336a:	6060      	str	r0, [r4, #4]
 800336c:	6863      	ldr	r3, [r4, #4]
 800336e:	6123      	str	r3, [r4, #16]
 8003370:	2300      	movs	r3, #0
 8003372:	9a03      	ldr	r2, [sp, #12]
 8003374:	7013      	strb	r3, [r2, #0]
 8003376:	e7ac      	b.n	80032d2 <_printf_i+0x126>
 8003378:	002a      	movs	r2, r5
 800337a:	6923      	ldr	r3, [r4, #16]
 800337c:	9906      	ldr	r1, [sp, #24]
 800337e:	9805      	ldr	r0, [sp, #20]
 8003380:	9d07      	ldr	r5, [sp, #28]
 8003382:	47a8      	blx	r5
 8003384:	3001      	adds	r0, #1
 8003386:	d0ae      	beq.n	80032e6 <_printf_i+0x13a>
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	079b      	lsls	r3, r3, #30
 800338c:	d415      	bmi.n	80033ba <_printf_i+0x20e>
 800338e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003390:	68e0      	ldr	r0, [r4, #12]
 8003392:	4298      	cmp	r0, r3
 8003394:	daa9      	bge.n	80032ea <_printf_i+0x13e>
 8003396:	0018      	movs	r0, r3
 8003398:	e7a7      	b.n	80032ea <_printf_i+0x13e>
 800339a:	0022      	movs	r2, r4
 800339c:	2301      	movs	r3, #1
 800339e:	9906      	ldr	r1, [sp, #24]
 80033a0:	9805      	ldr	r0, [sp, #20]
 80033a2:	9e07      	ldr	r6, [sp, #28]
 80033a4:	3219      	adds	r2, #25
 80033a6:	47b0      	blx	r6
 80033a8:	3001      	adds	r0, #1
 80033aa:	d09c      	beq.n	80032e6 <_printf_i+0x13a>
 80033ac:	3501      	adds	r5, #1
 80033ae:	68e3      	ldr	r3, [r4, #12]
 80033b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	42ab      	cmp	r3, r5
 80033b6:	dcf0      	bgt.n	800339a <_printf_i+0x1ee>
 80033b8:	e7e9      	b.n	800338e <_printf_i+0x1e2>
 80033ba:	2500      	movs	r5, #0
 80033bc:	e7f7      	b.n	80033ae <_printf_i+0x202>
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	0800355d 	.word	0x0800355d
 80033c4:	0800356e 	.word	0x0800356e

080033c8 <memmove>:
 80033c8:	b510      	push	{r4, lr}
 80033ca:	4288      	cmp	r0, r1
 80033cc:	d806      	bhi.n	80033dc <memmove+0x14>
 80033ce:	2300      	movs	r3, #0
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d008      	beq.n	80033e6 <memmove+0x1e>
 80033d4:	5ccc      	ldrb	r4, [r1, r3]
 80033d6:	54c4      	strb	r4, [r0, r3]
 80033d8:	3301      	adds	r3, #1
 80033da:	e7f9      	b.n	80033d0 <memmove+0x8>
 80033dc:	188b      	adds	r3, r1, r2
 80033de:	4298      	cmp	r0, r3
 80033e0:	d2f5      	bcs.n	80033ce <memmove+0x6>
 80033e2:	3a01      	subs	r2, #1
 80033e4:	d200      	bcs.n	80033e8 <memmove+0x20>
 80033e6:	bd10      	pop	{r4, pc}
 80033e8:	5c8b      	ldrb	r3, [r1, r2]
 80033ea:	5483      	strb	r3, [r0, r2]
 80033ec:	e7f9      	b.n	80033e2 <memmove+0x1a>
	...

080033f0 <_sbrk_r>:
 80033f0:	2300      	movs	r3, #0
 80033f2:	b570      	push	{r4, r5, r6, lr}
 80033f4:	4d06      	ldr	r5, [pc, #24]	@ (8003410 <_sbrk_r+0x20>)
 80033f6:	0004      	movs	r4, r0
 80033f8:	0008      	movs	r0, r1
 80033fa:	602b      	str	r3, [r5, #0]
 80033fc:	f7fd fb26 	bl	8000a4c <_sbrk>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d103      	bne.n	800340c <_sbrk_r+0x1c>
 8003404:	682b      	ldr	r3, [r5, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d000      	beq.n	800340c <_sbrk_r+0x1c>
 800340a:	6023      	str	r3, [r4, #0]
 800340c:	bd70      	pop	{r4, r5, r6, pc}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	200002c8 	.word	0x200002c8

08003414 <memchr>:
 8003414:	b2c9      	uxtb	r1, r1
 8003416:	1882      	adds	r2, r0, r2
 8003418:	4290      	cmp	r0, r2
 800341a:	d101      	bne.n	8003420 <memchr+0xc>
 800341c:	2000      	movs	r0, #0
 800341e:	4770      	bx	lr
 8003420:	7803      	ldrb	r3, [r0, #0]
 8003422:	428b      	cmp	r3, r1
 8003424:	d0fb      	beq.n	800341e <memchr+0xa>
 8003426:	3001      	adds	r0, #1
 8003428:	e7f6      	b.n	8003418 <memchr+0x4>

0800342a <memcpy>:
 800342a:	2300      	movs	r3, #0
 800342c:	b510      	push	{r4, lr}
 800342e:	429a      	cmp	r2, r3
 8003430:	d100      	bne.n	8003434 <memcpy+0xa>
 8003432:	bd10      	pop	{r4, pc}
 8003434:	5ccc      	ldrb	r4, [r1, r3]
 8003436:	54c4      	strb	r4, [r0, r3]
 8003438:	3301      	adds	r3, #1
 800343a:	e7f8      	b.n	800342e <memcpy+0x4>

0800343c <_realloc_r>:
 800343c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800343e:	0006      	movs	r6, r0
 8003440:	000c      	movs	r4, r1
 8003442:	0015      	movs	r5, r2
 8003444:	2900      	cmp	r1, #0
 8003446:	d105      	bne.n	8003454 <_realloc_r+0x18>
 8003448:	0011      	movs	r1, r2
 800344a:	f7ff fc51 	bl	8002cf0 <_malloc_r>
 800344e:	0004      	movs	r4, r0
 8003450:	0020      	movs	r0, r4
 8003452:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003454:	2a00      	cmp	r2, #0
 8003456:	d103      	bne.n	8003460 <_realloc_r+0x24>
 8003458:	f7ff fbde 	bl	8002c18 <_free_r>
 800345c:	2400      	movs	r4, #0
 800345e:	e7f7      	b.n	8003450 <_realloc_r+0x14>
 8003460:	f000 f81b 	bl	800349a <_malloc_usable_size_r>
 8003464:	0007      	movs	r7, r0
 8003466:	4285      	cmp	r5, r0
 8003468:	d802      	bhi.n	8003470 <_realloc_r+0x34>
 800346a:	0843      	lsrs	r3, r0, #1
 800346c:	42ab      	cmp	r3, r5
 800346e:	d3ef      	bcc.n	8003450 <_realloc_r+0x14>
 8003470:	0029      	movs	r1, r5
 8003472:	0030      	movs	r0, r6
 8003474:	f7ff fc3c 	bl	8002cf0 <_malloc_r>
 8003478:	9001      	str	r0, [sp, #4]
 800347a:	2800      	cmp	r0, #0
 800347c:	d0ee      	beq.n	800345c <_realloc_r+0x20>
 800347e:	002a      	movs	r2, r5
 8003480:	42bd      	cmp	r5, r7
 8003482:	d900      	bls.n	8003486 <_realloc_r+0x4a>
 8003484:	003a      	movs	r2, r7
 8003486:	0021      	movs	r1, r4
 8003488:	9801      	ldr	r0, [sp, #4]
 800348a:	f7ff ffce 	bl	800342a <memcpy>
 800348e:	0021      	movs	r1, r4
 8003490:	0030      	movs	r0, r6
 8003492:	f7ff fbc1 	bl	8002c18 <_free_r>
 8003496:	9c01      	ldr	r4, [sp, #4]
 8003498:	e7da      	b.n	8003450 <_realloc_r+0x14>

0800349a <_malloc_usable_size_r>:
 800349a:	1f0b      	subs	r3, r1, #4
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	1f18      	subs	r0, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da01      	bge.n	80034a8 <_malloc_usable_size_r+0xe>
 80034a4:	580b      	ldr	r3, [r1, r0]
 80034a6:	18c0      	adds	r0, r0, r3
 80034a8:	4770      	bx	lr
	...

080034ac <_init>:
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034b2:	bc08      	pop	{r3}
 80034b4:	469e      	mov	lr, r3
 80034b6:	4770      	bx	lr

080034b8 <_fini>:
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034be:	bc08      	pop	{r3}
 80034c0:	469e      	mov	lr, r3
 80034c2:	4770      	bx	lr
